#!/usr/bin/env lua
-- -*- lua -*-
------------------------------------------------------------------------
-- Extract directory location of this command and add it
-- to the lua search path
------------------------------------------------------------------------
local cmd = arg[0]

local i,j = cmd:find(".*/")
local cmd_dir = "./"
if (i) then
   cmd_dir = cmd:sub(1,j)
end
package.path = cmd_dir .. "tools/?.lua;" ..
               cmd_dir .. "?.lua;"       .. package.path

require("strict")
require("string_split")
require("serializeTbl")
local base64    = require("base64")
local decode64  = base64.decode64

local function grab(line, b)
   local a = {}
   for v in line:split('"') do
      a[#a + 1] = v
   end
   b[#b+1] = a[2]
end

_ModuleTable_ = false
function removeUnwantedFields(s)
   if (s == nil) then return "" end
   local func, msg = loadstring(s)
   if (func) then
      func()
   else
      io.stderr:write("Found syntax error: ",msg,"\n")
      io.stderr:write(s,"\n")
      return ""
   end

   local mt = _G._ModuleTable_

   for k,v in pairs(mt) do
      if (k:sub(1,2) == "c_") then
         mt[k] = nil
      end
   end
   local s = serializeTbl{ indent=false, name="_ModuleTable_", value=mt}
   return s:gsub("[ \n]","")
end

function sectionEnd(sType,A, a1, a2, a3)
   local b = {}
   if (#a2 > 0) then
      if (sType == "bash") then
         b[1] = "_ModuleTable_='" .. removeUnwantedFields(decode64(table.concat(a2,""))) .. "';"
         b[2] = "export _ModuleTable_;"
      else
         b[1] = "setenv _ModuleTable_ '" .. removeUnwantedFields(decode64(table.concat(a2,""))) .. "';"
      end
   end
   joinArrays(A, a1, b, a3)
   a1 = {}
   a2 = {}
   a3 = {}
   return a1, a2, a3
end

function joinArrays(A,...)
   local arg = { n = select("#", ...), ...}
   for i = 1, arg.n do
      local b = arg[i]
      for j = 1, #b do
         A[#A + 1] = b[j]
      end
   end
end

function joinMT_bash(whole)
   local A  = {}
   local a1 = {}
   local a2 = {}
   local a3 = {}
   local a  = a1
   local haveMT = false
   for s in whole:split("\n") do
      local state = "init"
      if (s:find("^_ModuleTable%d%d%d_=")) then
         if (state == "init") then
            state = "mt"
         end
         a = a3
         grab(s, a2)
         haveMT = true
      elseif (s:find("^export _ModuleTable") or
              s:find("^unset _ModuleTable")  or
              s:find("^_ModuleTable_Sz")) then
         state = "ignore"
      elseif (haveMT and s:find("^===========================")) then
         a1, a2, a3 = sectionEnd("bash", A, a1, a2, a3)
         state   = "init"
         a       = a1
         haveMT  = false
      end 
      if (state == "init") then
         a[#a + 1] = s
      end
   end
   sectionEnd("bash", A, a1, a2, a3)
   return A
end

function joinMT_csh(whole)
   local A  = {}
   local a1 = {}
   local a2 = {}
   local a3 = {}
   local a  = a1
   local state = "init"
   for s in whole:split("\n") do
      if (s:find("^setenv _ModuleTable%d%d%d_")) then
         if (state == "init") then
            state = "mt"
         end
         a = a3
         grab(s, a2)
      elseif (state == "init") then
         a[#a + 1] = s
      else
         a1, a2, a3 = sectionEnd("csh", A,a1,a2,a3)
         state   = "init"
         a       = a1
         a[#a+1] = s
      end
   end
   sectionEnd("csh",A,a1,a2,a3)
   return A
end

function main()
   local resultA
   local joinMT = joinMT_csh
   if ( arg[1]:sub(1,1) == "-") then
      if (arg[1] == "-bash") then
         joinMT = joinMT_bash
      end
      table.remove(arg,1)
   end

   local fn = arg[1]
   local f = io.open(fn)
   if (f) then
      local whole = f:read("*all")
      f:close()
      resultA = joinMT(whole)
      fn = arg[2]
      f = io.open(fn,"w")
      for _,v in ipairs(resultA) do
         if (v:len() > 0) then
            f:write(v,"\n")
         end
      end
      f:close()
   end
   
end

main()
