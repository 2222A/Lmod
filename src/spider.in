#!@path_to_lua@/lua
-- -*- lua -*-
IN_SPIDER = true
local cmd = arg[0]

local i,j = cmd:find(".*/")
local cmd_dir = "./"
if (i) then
   cmd_dir = cmd:sub(1,j)
end
package.path = cmd_dir .. "?.lua;" .. package.path

function cmdDir()
   return cmd_dir
end

function LmodError()
end

function mode()
end

function LmodMessage()
end

function is_spider()
   return IN_SPIDER
end

function isloaded()
   return false
end

require("border")
require("serializeTbl")
require("pairsByKeys")
require("fileOps")
local BeautifulTbl = require("BeautifulTbl")
local Dbg          = require("Dbg")
local Optiks       = require("Optiks")
local Spider       = require("Spider")
local concatTbl    = table.concat


function flip(a,t, tbl)
   for k,v in pairs(t) do
      local name = v.name
      if (tbl[name] == nil) then
         tbl[name] = {}
      end
      local s = concatTbl(a,":")
      tbl[name][#tbl[name]+1] = s
      if (next(v.children)) then
         a[#a+1] = name
         flip(a,v.children, tbl)
         a[#a]   = nil
      end
   end
end

local ignoreT     = {
   "^$",
   "^%.$",
   "^%$",
   "^%%",
   "^/bin/",
   "^/bin$",
   "^/sbin$",
   "^/usr/bin$",
   "^/usr/sbin$",
   "^/usr/local/bin$",
   "^/usr/local/share/bin$",
   "^/usr/lib/?",
   "^/opt/local/bin$",
}
      
function keepThisPath(path)
   for i = 1, #ignoreT do
      if (path:find(ignoreT[i])) then
         return false
      end
   end
   return true
end

local function add2map(entry, tbl, rmapT, kind)
   for path in pairs(tbl) do
      if (keepThisPath(path) and isDir(path)) then
         path = abspath(path)
         rmapT[path] = {pkg=entry.full, flavor=entry.parent, kind=kind}
      end
   end
end

function main()

   options()
   local masterTbl  = masterTbl()
   local pargs      = masterTbl.pargs
   local moduleT    = {}
   local moduleDirA = {}
   
   for _, v in ipairs(pargs) do
      for path in v:split(":") do
         moduleDirA[#moduleDirA+1] = path
      end
   end


   local dbg = Dbg:dbg()

   if (masterTbl.debug) then
      dbg:activateDebug(1)
   end

   dbg.start("main()")

   Spider.findAllModules(moduleDirA, moduleT)
   
   if (masterTbl.outputStyle == "tree") then
      local s = serializeTbl{name="moduleT",value=moduleT,indent=true}
      print(s)
      dbg.fini()
      return
   end

   local tbl = {}
   if (masterTbl.outputStyle == "list") then
      Spider.listModules(moduleT, tbl)
      table.sort(tbl)
      for i = 1,#tbl do
         print(tbl[i])
      end
      dbg.fini()
      return
   end

   local dbT = {}
   Spider.buildSpiderDB({"default"}, moduleT, dbT)

   if (masterTbl.outputStyle == "reverseMap") then
      local reverseMapT = {}

      for kkk,vvv in pairs(dbT) do

         for kk, entry in pairs(vvv) do
            if (entry.pathA) then
               add2map(entry, entry.pathA, reverseMapT,"bin")
            end
            if (entry.lpathA) then
               add2map(entry, entry.lpathA, reverseMapT,"lib")
            end
         end
      end
      local s = serializeTbl{name="reverseMapT",      value=reverseMapT,   indent=true}
      print(s)
      dbg.fini()
      return
   end
      
   local s = serializeTbl{name="dbT",      value=dbT,   indent=true}
   print(s)
   dbg.fini()
end




function options()
   local masterTbl = masterTbl()
   local usage         = "Usage: spider [options] moduledir ..."
   local cmdlineParser = Optiks:new{usage=usage, version="1.0"}

   cmdlineParser:add_option{ 
      name   = {'-d','--debug'},
      dest   = 'debug',
      action = 'store_true',
      default = false,
   }

   cmdlineParser:add_option{ 
      name   = {'-o','--output'},
      dest   = 'outputStyle',
      action = 'store',
      default = "list",
      help    = "Output Style: list, tree, reverseMap, spider"  
   }

   cmdlineParser:add_option{ 
      name   = {'-n','--no_recursion'},
      dest   = 'no_recursion',
      action = 'store_true',
      default = false,
   }

   local optionTbl, pargs = cmdlineParser:parse(arg)

   for v in pairs(optionTbl) do
      masterTbl[v] = optionTbl[v]
   end
   masterTbl.pargs = pargs

end

main()
