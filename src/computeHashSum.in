#!@path_to_lua@/lua
-- -*- lua -*-
local cmd = arg[0]
local i,j = cmd:find(".*/")
local cmd_dir = "./"
if (i) then
   cmd_dir = cmd:sub(1,j)
end
package.path = cmd_dir .. '?.lua;' .. package.path
_MyFileName  = ""

require("strict")
require("fileOps")
require("capture")
require("firstInPath")

local fh = nil
local getenv = os.getenv

function cmdDir()
   return cmd_dir
end

function quiet()
end

whatis = quiet
help   = quiet
setenv = quiet

function ShowCmd(name, ...)
   local a = {}
   for _,v in ipairs{...} do
      a[#a+1] = "\"" .. v .. "\""
   end
   fh:write(name,"(",table.concat(a,","),")\n")
end

function prepend_path(path, value)
   if (path ~= "MODULEPATH") then return end
   ShowCmd("prepend_path", path, value)
end

function append_path(path, value)
   if (path ~= "MODULEPATH") then return end
   ShowCmd("append_path", path, value)
end

function remove_path(path, value)
   if (path ~= "MODULEPATH") then return end
   ShowCmd("remove_path", path, value)
end

function load(...)
   ShowCmd("load",...)
end

function family(...)
   ShowCmd("family",...)
end

function unload(...)
   ShowCmd("unload",...)
end

function inherit(...)
   ShowCmd("inherit",...)
end

function display(...)
   ShowCmd("display",...)
end

function prereq(...)
   ShowCmd("prereq",...)
end

function conflict(...)
   ShowCmd("conflict",...)
end

function LmodError(...)
   ShowCmd("LmodError",...)
end

function LmodMessage(...)
   ShowCmd("LmodMessage",...)
end

function loadModuleFile(f)
   local myType = extname(f)
   if (myType == ".lua") then
      assert(loadfile(f))()
   else
      local a     = {}
      a[#a + 1]	  = pathJoin(cmdDir(),"tcl2lua.tcl")
      a[#a + 1]	  = f
      local cmd   = table.concat(a," ")
      local s     = capture(cmd)
      assert(loadstring(s))()
   end
end

function myFileName()
   return _MyFileName
end

function hierarchyA(package, levels)
   local n = myFileName():gsub("%.lua$","")

   -- Remove package from end of string by using the
   -- "plain" matching via string.find function
   package = package:gsub("%.lua$","")
   local i,j = n:find(package,1,true)
   if (j == n:len()) then
      n = n:sub(1,i-1)
   end

   -- remove any leading or trailing '/'
   n       = n:gsub("^/","")
   n       = n:gsub("/$","")
   local a = {}

   for dir in n:split("/") do
      a[#a + 1] = dir
   end

   local b = {}
   local j = #a
   
   for i = 1, levels do
      b[#b + 1 ] = pathJoin(a[j-1],a[j])
      j = j - 2
   end

   return b
end

function main()
   local fn      = os.tmpname()
   fh            = io.open(fn,"w")
   local verbose = false
   local i       = 1
   if (arg[1] == "-v") then
      i = i + 1
      verbose = true
   end
   loadModuleFile(arg[i])
   if (verbose) then
      print ("cat ".. fn)
      os.execute("cat ".. fn)
   end
   local s = capture("@path_to_hashsum@ "..fn)
   os.remove(fn)
   local i,j = s:find(" ")
   print (s:sub(1,i-1))
end

main()
