Version 3.6.4:
  1) Now uses the env. var PAGER or /bin/more to page through
     "module spider" and "module avail"

  2) Lmod now supports properties:

     add_property("arch","value1")
     add_property("arch","value2")

     See .lmodrc.lua for how to setup your properties.

  3) Lmod now knows if stderr is connected to a terminal or not.
     This means that the pager (and the color output of properties)
     are bypassed and straight text is written out when the output
     is a file and not a tty.  (Thanks to pieces from lua-term:
     git://github.com/hoelzro/lua-term.git)

Version 3.6.3:

  Features:
   1) A handy front end for the module command: ml
         $ ml
                                  means: module list
         $ ml foo bar
                                  means: module load foo bar
         $ ml -foo -bar baz goo
                                  means: module unload foo bar;
                                         module load baz goo;

      It does much more, do: "ml --help" for more information.

   2) Support for shell functions under bash or csh aliases.
      For lua module files only:

         set_shell_function("name","bash_function_str",
                                   "csh_alias_str")

      so the new ml command can be defined in a lua module file as:

         set_shell_function("ml",'eval $($LMOD_DIR/ml_cmd "$@")',
                                 "eval `$LMOD_DIR/ml_cmd $*`")
                              
      (csh alias internally translate the "$*" to "\!*")

      NOTE: Subshells do NOT inherit alias or shell functions!
      This means every subshell will need to load any modules that
      define aliases or shell functions.

   3) added module functions "always_load(...)", "always_unload(...)"
      The function "always_load('abc')" could be replaced by:

         if (mode() == "load") then
            load('abc')
         end

      That is, it always loads and never unloads.

      The always_unload('abc') inside a modulefile will ALWAYS
      cause the module 'abc' to be unloaded.  This is safe to do even
      if the module is not loaded.

   
Version 3.6/3.6.1:

 Features:
    1) The command:
         $ module spider foo
       is now a case-insensitive search.  This means that "foo" will
       match "foo", "Foo", "FooBar" and "BarFoo".
    2) The "mode()" function return:

         load, unload, help, whatis, spider

       depending on what mode the module file is beening read.

    3) Note that when reading in modules with the "computeHash" program
       the mode is "load".  The computeHash program is used to compute
       sha1 hashes of files as part of the setdefault/getdefault commands.


 Bug Fixes:
    1) set_alias() now correctly load and unloads, doesn't load
       during spider.
    2) module spider doesn't stop on a modulefile syntax error.
       It reports the error and keeps going.
    3) Loading a modulefile with a syntax error is handled
       cleanly.
    4) Lmod now searches all possible caches and picks the one which is newest.

Version 3.5.1/3.5.2:

   Features:

   1) Support for perl added.
   2) Support for python added:

      Example:

      #!/usr/bin/env python

      import os, sys
      sys.path.insert(0,"/opt/apps/lmod/lmod/setup/")

      from env_modules_python import module

      module("load","foobar")

      print "os.environ['FOOBAR']: ",os.environ['FOOBAR']

      module("avail");
     
   

Version 3.4.2:

   Features:

   1) A Lua modulefile can have a new command "try_load()". It is
      the same as a load() EXCEPT that it will not produce an error
      if the module does NOT exist.

   2) Similarily a TCL modulefile can have:

        module try-add foo

      which will load "foo" if it exists.  If it doesn't then there is
      no error reported.

Version 3.4.1/3.4.0

  Changes/Features:

  1) The structure of modules file directories has been extended.
     Previous versions required that symbolic links could only be used
     with files and not directories.  You can now use a symlink to
     a directory.  This is useful when trying to use Lmod with an existing
     module tree.


  2) The module list can be search:

     $ module list pattern1 pattern2 ...

     This command will report any module loaded that match pattern1
     or pattern2 ...

     $ module list gcc b

     Currently Loaded Modules Matching: gcc or b
     1) gcc/4.6.2  2) boost/1.49.0
     
  3) The configure script now checks to see that both lfs and posix are
     available or the script quits.

  4) Support for a system cache directory:

     ./configure --with-spiderCacheDir=/path/to/systemCacheDir

     On slow file system such as lustre a "module spider" can take
     a while. If one creates a cron that runs hourly to produce a 
     spider file.

     spider -o moduleT $LMOD_DEFAULT_MODULEPATH > /path/to/systemCacheDir/moduleT.lua


  Bug fixes:

  1) Previously modules name with special regular expression
     characters such as "-" would not be found with "module avail"
     and "module spider" now they will.
  
  2) There was a subtle bug with the way the module table was written
     out and read from the environment.  In rare cases, the module table
     could get corrupted.   This is now fixed.

  3) Previously, if MODULEPATH was not set then a lua error would be
     reported. This is now fixed.


Version 3.3.9

  1) This version fixes a bug in spider output.  Now if a modulefile
     could be found via two or more ways through the software hierarchy, 
     all parents will be reported.
  2) A new module command "reset" is now supported.  If the environment
     variable "LMOD_SYSTEM_DEFAULT_MODULES" contains a list of modules
     then issuing "module reset" will do a "module purge" and then load
     the list of modules specified by the this env. variable.
  3) Users can now specify directories as part of the name given to a
     "module default" name.  In other words doing
     "module setdefault foo/bar/baz" will create a file
     $HOME/.lmod.d/foo/bar/baz that has the current list of modules.
     Doing "module getdefault foo/bar/baz" will revive it.
  4) A new function "is_spider()" has been added. It return true if the
     modulefile being read by the spider command.

Version 3.3.6

  This version supports a different separator for path like variables:
  For TCL module files, it supports the "--delim" style:

    prepend-path --delim ";" LUA_PATH  "/a/lua/share/5.1/?.lua;/apps/lua/share/5.1/?;;"
    append-path  --delim ";" LUA_CPATH "/a/lua/share/5.1/?.so"

  For lua modulefiles you can give an optional third argument:

    prepend_path("LUA_PATH",  "/a/lua/share/5.1/?.lua;/a/lua/share/5.1/?;;",";")
    append_path( "LUA_CPATH", "/a/lua/share/5.1/?.so", ";")

Version 3.3.5

  This version better handles reporting the same module at multiple levels
  of the hierarchy through "module spider". If a module is a "Core" module
  as well as compiler and/or mpi/compiler dependent,
  "module spider" now reports that.


Version 3.2.1

  This version set return an error if there are any warning.  So if a user
  does:

     $ module load foo bar baz

  and "foo" and "bar" exist and "baz" does not then Lmod will load "foo"
  and "bar" and report a warning that "baz" wasn't loaded.


Version 3.1.2

  This version of Lmod supports the module command: "module spider" which
  will tell users all the modules that are possible independent of where
  the files are in the module hierarchy.  

Version 2.13

  This version of Lmod provide support for the "family" command.  The family
  command makes it easy to prevent user from loading two version of the same
  "family".  For example on our system, most users should not have two
  compilers loaded at the same time.  To support this feature, all you need
  do is add the following to all the compiler modulefiles:

  For TCL modulefiles do:

    family "compiler"

  For lua module files do:

    family("compiler")

  The word in quotes is case-sensitive so "Compiler" and "compiler" and
  "COMPILER" are all different.

  You can have different families.  So we currently have a "compiler"
  family and a "MPI" family.

  Expert users really want two of the same family loaded at the same time
  can set the environment variable "LMOD_EXPERT" to "1".  This will bypass
  the test for them.
