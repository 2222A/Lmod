Version 3.3.7

addto now adds the location of the executable to LUA_PATH before it does anything.  This is so that addto
can find "strict.lua" and other useful lua scripts.





Version 3.3.6

This version supports a different separator for path like variables:  For TCL module files, it supports the
"--delim" style:

    prepend-path --delim ";" LUA_PATH  "/opt/apps/lua/share/5.1/?.lua;/opt/apps/lua/share/5.1/?;;"
    append-path  --delim ";" LUA_CPATH "/opt/apps/lua/share/5.1/?.so"

For lua modulefiles you can give an optional third argument:

    prepend_path("LUA_PATH",  "/opt/apps/lua/share/5.1/?.lua;/opt/apps/lua/share/5.1/?;;",";")
    append_path( "LUA_CPATH", "/opt/apps/lua/share/5.1/?.so", ";")

Version 3.3.5

This version better handles reporting the same module at multiple levels of the hierarchy through "module spider".
If a module is a "Core" module as well as compiler and/or mpi/compiler dependent, module spider now reports that.


Version 3.3.2

This is a very minor bug fix.  Part of installation process ignored DESTDIR.  You only need to update if you
are using this as part of a spec file to create an RPM.




Version 3.3.1

This version offers better a keyword search feature. The keyword search searches the entire whatis entries and reports
back using the spider system.  It also tells users when using "module avail" that they might want to use "module spider
or module keyword".


Version 3.2.2

If the time to build a cache file is short ( < 2 sec) when doing a "module spider" then lmod does not
write out a cache file.  This allows for small systems to have accurate "spider's"

Version 3.2.1

This version set return an error if there are any warning.  So if a user does "module load foo bar baz"
and "foo" and "bar" exist and "baz" does not then Lmod will load "foo" and "bar" and report a warning that
"baz" wasn't loaded.




Version 3.1.2

This version of Lmod supports the module command: "module spider" which will tell users all the modules
that are possible independent of where the files are in the module hierarchy.  There is an additional
environment variable required for the "module spider" command to work.  Please set the environment variable
"LMOD_DEFAULT_MODULEPATH" to the initial MODULEPATH.



Version 2.13

This version of Lmod provide support for the "family" command.  The family command makes it easy to
prevent user from loading two version of the same "family".  For example on our system, most users
should not have two compilers loaded at the same time.  To support this feature, all you need do is
add the following to all the compiler modulefiles:

For TCL modulefiles do:

  family "compiler"

For lua module files do:

  family("compiler")

The word in quotes is case-sensitive so "Compiler" and "compiler" and "COMPILER" are all different.

You can have different families.  So we currently have a "compiler" family and a "MPI" family.

Expert users really want two of the same family loaded at the same time can set the environment
variable "LMOD_EXPERT" to "1".  This will bypass the test for them.
