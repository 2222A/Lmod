PREPEND_BLOCK    := @PREPEND_BLOCK@
ANCIENT          := @ANCIENT@
SHORT_TIME       := @SHORT_TIME@
SPIDER_CACHE_DIR := @SPIDER_CACHE_DIR@
PATH_TO_HASHSUM  := @PATH_TO_HASHSUM@
PATH_TO_LUA	 := @PATH_TO_LUA@
PATH_TO_PAGER	 := @PATH_TO_PAGER@
MODULEPATH_ROOT  := @MODULEPATH_ROOT@
VERSION_SRC	 := src/Version.lua
LUA_LIB          := @LUA_LIB@
LUA_INCLUDE      := @LUA_INCLUDE@
prefix		 := @prefix@
package		 := lmod
version		 := $(shell cd ./src; $(PATH_TO_LUA)/lua -e "local Version=require('Version'); print(Version.name())" | awk '{print $$1}')
PKG		 := $(prefix)/$(package)/$(package)
LIB		 := $(prefix)/$(package)/$(version)/lib
LIBEXEC		 := $(prefix)/$(package)/$(version)/libexec
INIT		 := $(prefix)/$(package)/$(version)/init

DIRLIST		 := $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(INIT) $(DESTDIR)$(LIB)

STANDALONE_PRGM  := src/lmod.in.lua src/addto.in.lua src/getmt.in.lua src/processMT.in.lua   \
                    src/spider.in.lua src/processModuleUsage.in.lua src/reportUsers.in.lua   \
                    src/clearMT_cmd.in.lua src/ml_cmd.in.lua
SHELL_INIT	 := bash.in csh.in ksh.in tcsh.in zsh.in sh.in perl.in env_modules_python.py.in .lmodrc.lua
SHELL_INIT	 := $(patsubst %, setup/%, $(SHELL_INIT))

STARTUP		 := profile.in cshrc.in
STARTUP		 := $(patsubst %, setup/%, $(STARTUP))

MAIN_DIR	 := Makefile.in INSTALL configure README_lua_modulefiles.txt

CONTRIB          := contrib/createmodule.sh contrib/BuildSystemCacheFile \
                    contrib/SitePackage contrib/tricky_modulefiles contrib/parseVersions
lua_code	 := $(filter-out %.in.lua, $(wildcard src/*.lua))        \
                    $(wildcard src/*.tcl) src/COPYRIGHT 
VDATE		 := $(shell date +'%F %H:%M')

ComputeHashSum   := src/computeHashSum.in.lua

REQUIRED_PKGS	 := \
                    BeautifulTbl  \
                    ColumnTable   \
                    Dbg           \
                    Optiks        \
                    Optiks_Option \
	            TermWidth     \
                    capture       \
                    fileOps       \
	            fillWords     \
                    json          \
                    hash          \
                    inherits      \
                    pairsByKeys   \
                    serializeTbl  \
                    strict        \
                    string_split  \
                    string_trim

.PHONY: test pkgs

all:
	@echo done

install: $(DIRLIST) shell_init startup libexec pkgs other_tools
	$(RM) $(DESTDIR)$(PKG)
	ln -s $(version) $(DESTDIR)$(PKG)

echo:
	@echo Version: $(version)
echo_version:
	@echo $(version)

echo_rtm:
	@echo $(filter-out src/%.in.lua, $(wildcard src/*.lua))



$(DIRLIST) :
	mkdir -p $@

__installMe:
	-for i in $(FILELIST); do                                 \
         bareN=$${i##*/};                                         \
         fn=$${bareN%%.in*};                                      \
         sed -e 's|@PREFIX@|@prefix@|g'                           \
	      -e 's|@path_to_lua@|$(PATH_TO_LUA)|g'               \
	      -e 's|@path_to_hashsum@|$(PATH_TO_HASHSUM)|g'       \
	      -e 's|@path_to_pager@|$(PATH_TO_PAGER)|g'           \
	      -e 's|@ancient@|$(ANCIENT)|g'                       \
	      -e 's|@prepend_block@|$(PREPEND_BLOCK)|g'           \
	      -e 's|@short_time@|$(SHORT_TIME)|g'                 \
	      -e 's|@cacheDir@|$(SPIDER_CACHE_DIR)|g'             \
	      -e 's|@modulepath_root@|$(MODULEPATH_ROOT)|g'       \
              -e 's|@PKG@|$(PKG)|g'         < $$i > $$fn;         \
          [ -n "$(DIRLOC)" ] && mv $$fn $(DESTDIR)$(DIRLOC) && chmod +x $(DESTDIR)$(DIRLOC)/$$fn; \
        done

shell_init: $(SHELL_INIT)
	$(MAKE) FILELIST="$^" DIRLOC=$(INIT)    __installMe

startup: $(STARTUP)
	$(MAKE) FILELIST="$^" DIRLOC=$(INIT)    __installMe

other_tools: $(ComputeHashSum) $(STANDALONE_PRGM)
	$(MAKE) FILELIST="$^" DIRLOC=$(LIBEXEC) __installMe

src/computeHashSum: $(ComputeHashSum)
	$(MAKE) FILELIST="$^" DIRLOC="src"      __installMe
	chmod +x $@

pkgs:
	cd pkgs; \
        $(MAKE) LUA_INC=$(LUA_INCLUDE) LUA_LIB=$(LUA_LIB)  LIB=$(DESTDIR)$(LIB) \
                SHARE=$(DESTDIR)$(LIBEXEC) install


makefile: Makefile.in config.status
	./config.status $@

config.status:
	./config.status --recheck

dist:  
	$(MAKE) DistD=DIST _dist

_dist: _distMkDir _distMainDir _distSrc _distSetup _distReqPkg    \
       _distPkgs _distMF    _distContrib _distTar

_distMkDir:
	$(RM) -r $(DistD)
	mkdir $(DistD)


_distContrib:
	mkdir $(DistD)/contrib
	cp -r $(CONTRIB) $(DistD)/contrib
_distSrc:
	mkdir $(DistD)/src
	cp $(lua_code) $(ComputeHashSum) $(STANDALONE_PRGM) $(DistD)/src

_distPkgs:
	mkdir $(DistD)/pkgs
	cp -r pkgs/* $(DistD)/pkgs

_distSetup:
	mkdir $(DistD)/setup
	cp $(SHELL_INIT) $(STARTUP) $(DistD)/setup

_distMainDir:
	cp $(MAIN_DIR) $(DistD)

_distReqPkg:
	cp `findLuaPkgs $(REQUIRED_PKGS)` $(DistD)/src

_distMF:
	mkdir $(DistD)/mf
	cp -r mf $(DistD)/mf
	find $(DistD)/mf -name .svn | xargs rm -rf 

_distTar:
	echo "Lmod"-$(version) > .fname;                		   \
	$(RM) -r `cat .fname` `cat .fname`.tar*;         		   \
	mv ${DistD} `cat .fname`;                            		   \
	tar chf `cat .fname`.tar `cat .fname`;           		   \
	bzip2 `cat .fname`.tar;                           		   \
	rm -rf `cat .fname` .fname; 


test:
	cd rt; unset TMFuncPATH; tm .

tags:
	find . \( -regex '.*~$$\|.*/\.git\|.*/\.git/' -prune \)  \
               -o -type f > file_list.1
	sed -e 's|.*/.git.*||g'                                    \
            -e 's|.*/rt/.*/t1/.*||g'                               \
            -e 's|./TAGS||g'                                       \
            -e 's|./configure$$||g'                                \
            -e 's|.*.tar.gz$$||g'                                  \
            -e 's|.*.tar.bz2$$||g'                                 \
            -e 's|.*.csv$$||g'                                     \
            -e 's|.*.pdf$$||g'                                     \
            -e 's|.*.used$$||g'                                    \
            -e 's|./config.log$$||g'                               \
            -e 's|./testreports/.*||g'                             \
            -e 's|./config.status$$||g'                            \
            -e 's|.*\~$$||g'                                       \
            -e 's|./file_list.*||g'                                \
            -e '/^\s*$$/d'                                         \
	       < file_list.1 > file_list.2
	etags  `cat file_list.2`
	$(RM) file_list.*


libexec:  $(lua_code)
	cp $^ $(DESTDIR)$(LIBEXEC)

clean:
	$(RM) config.log
	cd pkgs; $(MAKE) LIB=$(DESTDIR)$(LIB) SHARE=$(DESTDIR)$(LIBEXEC) clean

clobber: clean

distclean: clobber
	$(RM) makefile config.status

gittag:
        ifneq ($(TAG),)
	  @git status -s > /tmp/lmod$$$$;                                              \
          if [ -s /tmp/lmod$$$$ ]; then                                                \
	    echo "All files not checked in => try again";                              \
	  else                                                                         \
	    $(RM)                                                      $(VERSION_SRC); \
	    echo "--module('Version')"                              >  $(VERSION_SRC); \
	    echo 'local M={}'                                       >> $(VERSION_SRC); \
	    echo 'function M.name() return "'$(TAG) $(VDATE)'" end' >> $(VERSION_SRC); \
	    echo 'return M'                                         >> $(VERSION_SRC); \
            git commit -m "moving to TAG_VERSION $(TAG)"               $(VERSION_SRC); \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'                     ; \
	    git push --tags                                                          ; \
          fi;                                                                          \
          rm -f /tmp/lmod$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif
