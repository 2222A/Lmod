USE_DOT_FILES            := @USE_DOT_FILES@
ZSH_SITE_FUNCTIONS_DIR   := @ZSH_SITE_FUNCTIONS_DIR@
SPIDER_CACHE_DESCRIPT_FN := @SPIDER_CACHE_DESCRIPT_FN@
PREPEND_BLOCK     	 := @PREPEND_BLOCK@
COLORIZE          	 := @COLORIZE@
ANCIENT           	 := @ANCIENT@
SHORT_TIME        	 := @SHORT_TIME@
SPIDER_CACHE_DIRS 	 := @SPIDER_CACHE_DIRS@
PATH_TO_HASHSUM   	 := @PATH_TO_HASHSUM@
PATH_TO_LUA	  	 := @PATH_TO_LUA@
PATH_TO_PAGER	  	 := @PATH_TO_PAGER@
MODULEPATH_ROOT   	 := @MODULEPATH_ROOT@
VERSION_SRC	  	 := src/Version.lua
LUA_INCLUDE       	 := @LUA_INCLUDE@
UPDATE_SYSTEM_FN  	 := @UPDATE_SYSTEM_FN@
GIT_VERSION              := $(shell git describe --always)
prefix		  	 := @prefix@
package		  	 := lmod
version		  	 := $(shell cd ./src; $(PATH_TO_LUA)/lua -e "V=require('Version'); print(V.tag())")
PKG		  	 := $(prefix)/$(package)/$(package)
LIB		  	 := $(prefix)/$(package)/$(version)/lib
LIBEXEC		  	 := $(prefix)/$(package)/$(version)/libexec
LIBTOOLS                 := $(prefix)/$(package)/$(version)/libexec/tools
INIT		  	 := $(prefix)/$(package)/$(version)/init

DIRLIST		  	 := $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(LIBTOOLS) $(DESTDIR)$(INIT) $(DESTDIR)$(LIB)

STANDALONE_PRGM   	 := src/lmod.in.lua src/addto.in.lua src/getmt.in.lua src/processMT.in.lua   \
                            src/spider.in.lua src/processModuleUsage.in.lua src/reportUsers.in.lua   \
                            src/clearMT_cmd.in.lua src/ml_cmd.in.lua src/spiderCacheSupport.in.lua
SHELL_INIT	  	 := bash.in csh.in ksh.in tcsh.in zsh.in sh.in perl.in                       \
                            env_modules_python.py.in lmod_bash_completions .lmodrc.lua
SHELL_INIT	  	 := $(patsubst %, setup/%, $(SHELL_INIT))

ZSH_FUNCS                := setup/zsh/_ml setup/zsh/_module

STARTUP		  	 := profile.in cshrc.in
STARTUP		  	 := $(patsubst %, setup/%, $(STARTUP))

MAIN_DIR	  	 := Makefile.in INSTALL configure README_lua_modulefiles.txt

CONTRIB_DIRS           	 :=  \
                             bash_patch                        \
                             BuildSystemCacheFile              \
                             converting_shell_to_module_files  \
                             hook                              \
                             parseVersions                     \
                             SitePackage                       \
                             TACC                              \
                             tricky_modulefiles

CONTRIB                  := $(patsubst %, contrib/%, $(CONTRIB_DIRS))
lua_code	  	 := $(filter-out %.in.lua, $(wildcard src/*.lua))                         \
                            $(wildcard src/*.tcl)
VDATE		  	 := $(shell date +'%F %H:%M')

ComputeHashSum    	 := src/computeHashSum.in.lua
spiderCacheSupportCMD    := lua src/spiderCacheSupport.in.lua

.PHONY: test pkgs

all:
	@echo done

pre-install: $(DIRLIST) shell_init startup spiderCacheSupport libexec libtools pkgs other_tools 

install: pre-install  zsh_tab_funcs
	$(RM) $(DESTDIR)$(PKG)
	ln -s $(version) $(DESTDIR)$(PKG)

echo:
	@echo Version: $(version)


$(DIRLIST) :
	mkdir -p $@

__installMe:
	-for i in $(FILELIST); do                                     \
           bareN=$${i##*/};                                           \
           fn=$${bareN%%.in*};                                        \
           ext=$${bareN#*.};                                          \
           sed  -e 's|@PREFIX@|@prefix@|g'                            \
	        -e 's|@path_to_lua@|$(PATH_TO_LUA)|g'                 \
	        -e 's|@path_to_hashsum@|$(PATH_TO_HASHSUM)|g'         \
	        -e 's|@path_to_pager@|$(PATH_TO_PAGER)|g'             \
                -e 's|@use_dot_files@|$(USE_DOT_FILES)|g'             \
                -e 's|@git@|$(GIT_VERSION)|g'                         \
	        -e 's|@ancient@|$(ANCIENT)|g'                         \
	        -e 's|@prepend_block@|$(PREPEND_BLOCK)|g'             \
	        -e 's|@colorize@|$(COLORIZE)|g'                       \
	        -e 's|@short_time@|$(SHORT_TIME)|g'                   \
	        -e 's|@cacheDirs@|$(SPIDER_CACHE_DIRS)|g'             \
	        -e 's|@updateSystemFn@|$(UPDATE_SYSTEM_FN)|g'         \
	        -e 's|@modulepath_root@|$(MODULEPATH_ROOT)|g'         \
                -e 's|@PKG@|$(PKG)|g'         < $$i > $(DIRLOC)/$$fn; \
            [ "$$ext" = "in.lua" -o "$$ext" = "tcl" ] &&              \
               chmod +x $(DIRLOC)/$$fn;                               \
        done

shell_init: $(SHELL_INIT)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(INIT)    __installMe

startup: $(STARTUP)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(INIT)    __installMe

other_tools: $(ComputeHashSum) $(STANDALONE_PRGM)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe

spiderCacheSupport:
	$(spiderCacheSupportCMD) --cacheDirs "$(SPIDER_CACHE_DIRS)"          \
	                         --updateFn  "$(UPDATE_SYSTEM_FN)"           \
                                 --descriptFn "$(SPIDER_CACHE_DESCRIPT_FN)"  \
                                 >> $(DESTDIR)$(INIT)/.lmodrc.lua;

src/computeHashSum: $(ComputeHashSum)
	$(MAKE) FILELIST="$^" DIRLOC="src"                __installMe
	chmod +x $@

pkgs:
	cd pkgs; \
        $(MAKE) LUA_INC=$(LUA_INCLUDE)  LIB=$(DESTDIR)$(LIB) \
                SHARE=$(DESTDIR)$(LIBEXEC) install

zsh_tab_funcs: $(ZSH_FUNCS)
	-if [ -n "$(ZSH_SITE_FUNCTIONS_DIR)" ]; then \
          cp $^ $(DESTDIR)$(ZSH_SITE_FUNCTIONS_DIR);                \
        fi

makefile: Makefile.in config.status
	./config.status $@

config.status:
	./config.status --recheck

dist:
	$(MAKE) DistD=DIST _dist

_dist: _distMkDir _distMainDir _distSrc _distSetup _distSetupZsh \
       _distVersion _distPkgs _distMF    _distContrib _distTar

_distMkDir:
	$(RM) -r $(DistD)
	mkdir $(DistD)


_distContrib:
	mkdir $(DistD)/contrib
	cp -r $(CONTRIB) $(DistD)/contrib

_distSrc:
	mkdir $(DistD)/src
	cp $(lua_code) $(ComputeHashSum) $(STANDALONE_PRGM) $(DistD)/src
	mkdir $(DistD)/src/tools
	cp src/tools/*.lua $(DistD)/src/tools

_distVersion:
	perl -p -i -e 's/\@git\@/$(GIT_VERSION)/g' $(DistD)/src/Version.lua

_distPkgs:
	mkdir $(DistD)/pkgs
	cp -r pkgs/* $(DistD)/pkgs

_distSetup:
	mkdir $(DistD)/setup
	cp $(SHELL_INIT) $(STARTUP) $(DistD)/setup

_distSetupZsh:
	mkdir $(DistD)/setup/zsh
	cp $(ZSH_FUNCS) $(DistD)/setup/zsh



_distMainDir:
	cp $(MAIN_DIR) $(DistD)

_distMF:
	mkdir $(DistD)/mf
	cp -r mf $(DistD)/mf
	find $(DistD)/mf -name .svn | xargs rm -rf

_distTar:
	echo "Lmod"-$(version) > .fname;                		   \
	$(RM) -r `cat .fname` `cat .fname`.tar*;         		   \
	mv ${DistD} `cat .fname`;                            		   \
	tar chf `cat .fname`.tar `cat .fname`;           		   \
	bzip2 `cat .fname`.tar;                           		   \
	rm -rf `cat .fname` .fname;


test:
	cd rt; unset TMFuncPATH; tm .

tags:
	find . \( -regex '.*~$$\|.*/\.git\|.*/\.git/' -prune \)  \
               -o -type f > file_list.1
	sed -e 's|.*/.git.*||g'                                  \
            -e 's|.*/rt/.*/t1/.*||g'                             \
            -e 's|./TAGS||g'                                     \
            -e 's|./configure$$||g'                              \
            -e 's|.*\.tgz$$||g'                                  \
            -e 's|.*\.tar\.gz$$||g'                              \
            -e 's|.*\.tar\.bz2$$||g'                             \
            -e 's|.*\.csv$$||g'                                  \
            -e 's|^#.*||g'                                       \
            -e 's|/#.*||g'                                       \
            -e 's|\.#.*||g'                                      \
            -e 's|.*\.pdf$$||g'                                  \
            -e 's|.*\.used$$||g'                                 \
            -e 's|./.*\.log$$||g'                                \
            -e 's|./testreports/.*||g'                           \
            -e 's|./config\.status$$||g'                         \
            -e 's|.*\~$$||g'                                     \
            -e 's|./file_list\..*||g'                            \
            -e '/^\s*$$/d'                                       \
	       < file_list.1 > file_list.2
	etags  `cat file_list.2`
	$(RM) file_list.*


libexec:  $(lua_code)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe

libtools: src/tools/*.lua
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBTOOLS) __installMe


clean:
	$(RM) config.log
	cd pkgs; $(MAKE) LIB=$(DESTDIR)$(LIB) SHARE=$(DESTDIR)$(LIBEXEC) clean

clobber: clean

distclean: clobber
	$(RM) makefile config.status

world_update:
	@git status -s > /tmp/lmod$$$$;                                            \
        if [ -s /tmp/lmod$$$$ ]; then                                              \
            echo "All files not checked in => try again";                          \
        else                                                                       \
            git push github;                                                       \
            git push --tags github;                                                \
            git push sf;                                                           \
            git push --tags sf;                                                    \
        fi;                                                                        \
        rm -f /tmp/lmod$$$$



gittag:
        ifneq ($(TAG),)
	  @git status -s > /tmp/lmod$$$$;                                            \
          if [ -s /tmp/lmod$$$$ ]; then                                              \
	    echo "All files not checked in => try again";                            \
	  else                                                                       \
	    $(RM)                                                    $(VERSION_SRC); \
	    echo "--module('Version')"                            >  $(VERSION_SRC); \
	    echo 'local M={}'                                     >> $(VERSION_SRC); \
	    echo 'function M.tag()  return "$(TAG)"   end'        >> $(VERSION_SRC); \
	    echo 'function M.date() return "$(VDATE)" end'        >> $(VERSION_SRC); \
	    echo 'function M.git()  return "(@git@)"  end'        >> $(VERSION_SRC); \
	    echo 'function M.name()'                              >> $(VERSION_SRC); \
            echo '  local a = {}'                                 >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.tag()'                            >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.git()'                            >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.date()'                           >> $(VERSION_SRC); \
	    echo '  return table.concat(a," ")'                   >> $(VERSION_SRC); \
	    echo 'end'                                            >> $(VERSION_SRC); \
	    echo 'return M'                                       >> $(VERSION_SRC); \
            git commit -m "moving to TAG_VERSION $(TAG)"             $(VERSION_SRC); \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'                   ; \
	    git push --tags                                                        ; \
          fi;                                                                        \
          rm -f /tmp/lmod$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif
