===========================
step 1
lua ProjectDIR/src/lmod.in.lua bash --version
===========================
Modules based on Lua: Version 5.6.3 5.6.3-35-g8ab5ca4 2014-06-23 05:28
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 2
lua ProjectDIR/src/lmod.in.lua bash --help
===========================
Usage: module [options] sub-command [args ...]
Options:
  -h -? -H --help               This help message
  --topic=topic                 help topics: modfuncs envvars
  -D                            Program tracing written to stderr
  --debug=dbglvl                Program tracing written to stderr
  -d --default                  List default modules only when used with
                                avail
  -q --quiet                    Do not print out warnings
  --expert                      Expert mode
  -t --terse                    Write out in machine readable format for
                                commands: list, avail, spider, savelist
  --initial_load                loading Lmod for first time in a user shell
  --latest                      Load latest (ignore default)
  --ignore_cache                Treat the cache file(s) as out-of-date
  --novice                      Turn off expert and quiet flag
  --raw                         Print modulefile in raw output when used
                                with show
  -w twidth --width=twidth      Use this as max term width
  -v --version                  Print version info and quit
  -r --regexp                   use regular expression match
  --dumpversion                 Dump version in a machine readable way and
                                quit
  --localvar=localvarA          local variables needed to be set after this
                                commands execution
  --check_syntax --checkSyntax  Checking module command syntax: do not load
  --config                      Report Lmod Configuration
  --mt                          Report Module Table State
  --timer                       report run times
  --force                       force removal of a sticky module or save an
                                empty collection
module [options] sub-command [args ...]
Help sub-commands:
  help                              prints this message
  help                module [...]  print help message from module(s)
Loading/Unloading sub-commands:
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not
                                    found
  del | unload        module [...]  Remove module(s), do not complain if not
                                    found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of
                                    modules.
  update                            reload all currently loaded modules.
Listing / Searching sub-commands:
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the
                                    pattern
  avail | av                        List available modules
  avail | av          string        List available modules that contain
                                    "string".
  spider                            List all possible modules
  spider              module        List all possible version of that module
                                    file
  spider              string        List all module that contain the
                                    "string".
  spider              name/version  Detailed information about that version
                                    of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".
Searching with Lmod:
  All searching (spider, list, avail, keyword) support regular expressions:
  spider -r           '^p'          Finds all the modules that start with
                                    `p' or `P'
  spider -r           mpi           Finds all modules that have "mpi" in
                                    their name.
  spider -r           'mpi$         Finds all modules that end with "mpi" in
                                    their name.
Handling a collection of modules:
  save | s                          Save the current list of modules to a
                                    user defined "default".
  save | s            name          Save the current list of modules to
                                    "name" collection.
  restore | r                       Restore modules from the user's
                                    "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
Deprecated commands:
  reset                             The same as "restore system"
  getdefault          [name]        load name collection of modules or
                                    user's "default" if no name given.
                                    ===> Use "restore" instead <====
  setdefault          [name]        Save current list of modules to name if
                                    given, otherwise save as the default
                                    list for you the user.
                                    ===> Use "save" instead. <====
Miscellaneous sub-commands:
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua
                                    table.
Important Environment Variables:
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints
                                    properties and warning in color.
The following guides are at http://www.tacc.utexas.edu/tacc-projects/lmod
  User Guide                 - How to use.
  Advance User Guide         - How to create you own modules.
  System Administrator Guide - How to install Lmod on your own system.
Modules based on Lua: Version 5.6.3 5.6.3-35-g8ab5ca4 2014-06-23 05:28
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 3
lua ProjectDIR/src/lmod.in.lua bash help
===========================
Usage: module [options] sub-command [args ...]
Options:
  -h -? -H --help               This help message
  --topic=topic                 help topics: modfuncs envvars
  -D                            Program tracing written to stderr
  --debug=dbglvl                Program tracing written to stderr
  -d --default                  List default modules only when used with
                                avail
  -q --quiet                    Do not print out warnings
  --expert                      Expert mode
  -t --terse                    Write out in machine readable format for
                                commands: list, avail, spider, savelist
  --initial_load                loading Lmod for first time in a user shell
  --latest                      Load latest (ignore default)
  --ignore_cache                Treat the cache file(s) as out-of-date
  --novice                      Turn off expert and quiet flag
  --raw                         Print modulefile in raw output when used
                                with show
  -w twidth --width=twidth      Use this as max term width
  -v --version                  Print version info and quit
  -r --regexp                   use regular expression match
  --dumpversion                 Dump version in a machine readable way and
                                quit
  --localvar=localvarA          local variables needed to be set after this
                                commands execution
  --check_syntax --checkSyntax  Checking module command syntax: do not load
  --config                      Report Lmod Configuration
  --mt                          Report Module Table State
  --timer                       report run times
  --force                       force removal of a sticky module or save an
                                empty collection
module [options] sub-command [args ...]
Help sub-commands:
  help                              prints this message
  help                module [...]  print help message from module(s)
Loading/Unloading sub-commands:
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not
                                    found
  del | unload        module [...]  Remove module(s), do not complain if not
                                    found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of
                                    modules.
  update                            reload all currently loaded modules.
Listing / Searching sub-commands:
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the
                                    pattern
  avail | av                        List available modules
  avail | av          string        List available modules that contain
                                    "string".
  spider                            List all possible modules
  spider              module        List all possible version of that module
                                    file
  spider              string        List all module that contain the
                                    "string".
  spider              name/version  Detailed information about that version
                                    of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".
Searching with Lmod:
  All searching (spider, list, avail, keyword) support regular expressions:
  spider -r           '^p'          Finds all the modules that start with
                                    `p' or `P'
  spider -r           mpi           Finds all modules that have "mpi" in
                                    their name.
  spider -r           'mpi$         Finds all modules that end with "mpi" in
                                    their name.
Handling a collection of modules:
  save | s                          Save the current list of modules to a
                                    user defined "default".
  save | s            name          Save the current list of modules to
                                    "name" collection.
  restore | r                       Restore modules from the user's
                                    "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
Deprecated commands:
  reset                             The same as "restore system"
  getdefault          [name]        load name collection of modules or
                                    user's "default" if no name given.
                                    ===> Use "restore" instead <====
  setdefault          [name]        Save current list of modules to name if
                                    given, otherwise save as the default
                                    list for you the user.
                                    ===> Use "save" instead. <====
Miscellaneous sub-commands:
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua
                                    table.
Important Environment Variables:
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints
                                    properties and warning in color.
The following guides are at http://www.tacc.utexas.edu/tacc-projects/lmod
  User Guide                 - How to use.
  Advance User Guide         - How to create you own modules.
  System Administrator Guide - How to install Lmod on your own system.
Modules based on Lua: Version 5.6.3 5.6.3-35-g8ab5ca4 2014-06-23 05:28
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 4
lua ProjectDIR/src/lmod.in.lua bash help amber
===========================
Module Specific Help for "amber/9"
The TACC Amber installation only includes the parallel Sander/pmemd modules.
The Amber modulefile defines the following environment variables:
TACC_AMBER_DIR, TACC_AMBER_DOC, TACC_AMBER_BIN for the location of
the Amber distribution, documentation, and binaries, respectively.
Also, AMBERHOME is set to the Amber Home Directory (TACC_AMBER_DIR),
and $AMBERHOME/exe is included in the PATH variable.
Here is an example command for executing the Sander module:
sander.LES -i tes.in -o tes.out -p tes.prmtop.save -c tes.x -r tes.rst
Version 9
===========================
step 5
lua ProjectDIR/src/lmod.in.lua bash --config
===========================
Modules based on Lua: Version 5.6.3 5.6.3-35-g8ab5ca4 2014-06-23 05:28
    by Robert McLay mclay@tacc.utexas.edu
Description                      Value
Allow TCL modulefiles            @allow_tcl_mfiles@
User cache valid time(sec)       @ancient@
Case Independent Sorting         @case_independent_sorting@
Colorize Lmod                    @colorize@
Using dotfiles                   @use_dot_files@
Allow duplicate paths            @duplicate_paths@
System lua_json                  @have_lua_json@
System lua-term                  @have_lua_term@
Active lua-term                  true
Include modulepath dir in avail  no
MODULEPATH_ROOT                  @modulepath_root@
number of cache dirs             0
Path to HashSum                  @path_to_hashsum@
Path to Lua                      @path_to_lua@
Path to Pager                    @path_to_pager@
Pkg Class name                   Pkg
Lmod prefix                      @PREFIX@
Prepend order                    @prepend_block@
Supporting Full Settarg Use      @lmod_full_settarg_support@
Write cache after (sec)          @short_time@
Site Pkg location                standard
uname -a
Admin file                       ProjectDIR/src/../../etc/admin.list
Does Admin file exist            no
Active RC file(s):
ProjectDIR/init/lmodrc.lua
OutputDIR/.lmodrc.lua
 Lmod Property Table:
propT = {
  arch = {
    displayT = {
      gpu = {
        ["color"] = "red",
        ["doc"] = "built for GPU",
        ["long"] = "(g)",
        ["short"] = "(g)",
      },
      ["gpu:mic"] = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU",
        ["long"] = "(g,m)",
        ["short"] = "(gm)",
      },
      ["gpu:mic:offload"] = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU and offload to the MIC",
        ["long"] = "(g,m,o)",
        ["short"] = "(@)",
      },
      mic = {
        ["color"] = "blue",
        ["doc"] = "built for host and native MIC",
        ["long"] = "(m)",
        ["short"] = "(m)",
      },
      ["mic:offload"] = {
        ["color"] = "blue",
        ["doc"] = "built for host, native MIC and offload to the MIC",
        ["long"] = "(m,o)",
        ["short"] = "(*)",
      },
      offload = {
        ["color"] = "blue",
        ["doc"] = "built for offload to the MIC only",
        ["long"] = "(o)",
        ["short"] = "(o)",
      },
    },
    validT = {
      ["gpu"] = 1,
      ["mic"] = 1,
      ["offload"] = 1,
    },
  },
  lmod = {
    displayT = {
      sticky = {
        ["color"] = "red",
        ["doc"] = "Module is Sticky, requires --force to unload or purge",
        ["long"] = "(S)",
        ["short"] = "(S)",
      },
    },
    validT = {
      ["sticky"] = 1,
    },
  },
  state = {
    displayT = {
      experimental = {
        ["color"] = "blue",
        ["doc"] = "Experimental",
        ["long"] = "(E)",
        ["short"] = "(E)",
      },
      obsolete = {
        ["color"] = "red",
        ["doc"] = "Obsolete",
        ["long"] = "(O)",
        ["short"] = "(O)",
      },
      testing = {
        ["color"] = "green",
        ["doc"] = "Testing",
        ["long"] = "(T)",
        ["short"] = "(T)",
      },
    },
    validT = {
      ["experimental"] = 1,
      ["obsolete"] = 1,
      ["testing"] = 1,
    },
  },
}
