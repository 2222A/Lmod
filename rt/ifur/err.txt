===========================
step 1
lua ProjectDIR/src/lmod.in.lua bash --version
===========================
Modules based on Lua: Version 5.7.3 5.7.3 2014-08-09 11:25
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 2
lua ProjectDIR/src/lmod.in.lua bash load stdenv
===========================
===========================
step 3
lua ProjectDIR/src/lmod.in.lua bash avail
===========================
ProjectDIR/rt/ifur/mf/minerva/all/Core
   GCC/4.9.1    gompi/2.9.11    goolf/2.9.11
ProjectDIR/rt/ifur/mf/core
   easybuild/defaults    stdenv (S)
  Where:
   (S):  Module is Sticky, requires --force to unload or purge
Use "module spider" to find all possible modules.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 4
lua ProjectDIR/src/lmod.in.lua bash load GCC
===========================
===========================
step 5
lua ProjectDIR/src/lmod.in.lua bash avail
===========================
ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1
   OpenBLAS/0.2.9    OpenSSL/1.0.1f    hwloc/1.9        zlib/1.2.8
   OpenMPI/1.8.1     bzip2/1.0.6       numactl/2.0.9
ProjectDIR/rt/ifur/mf/minerva/all/Core
   GCC/4.9.1    gompi/2.9.11    goolf/2.9.11
ProjectDIR/rt/ifur/mf/core
   easybuild/defaults    stdenv (S)
  Where:
   (S):  Module is Sticky, requires --force to unload or purge
Use "module spider" to find all possible modules.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 6
lua ProjectDIR/src/lmod.in.lua bash load OpenMPI
===========================
===========================
step 7
lua ProjectDIR/src/lmod.in.lua bash load Python
===========================
===========================
step 8
lua ProjectDIR/src/lmod.in.lua bash -D unload Python
===========================
Description                      Value
Allow TCL modulefiles            @allow_tcl_mfiles@
User cache valid time(sec)       @ancient@
Case Independent Sorting         @case_independent_sorting@
Colorize Lmod                    @colorize@
Using dotfiles                   @use_dot_files@
Allow duplicate paths            @duplicate_paths@
System lua_json                  @have_lua_json@
System lua-term                  @have_lua_term@
Include modulepath dir in avail  no
MODULEPATH_ROOT                  @modulepath_root@
number of cache dirs             0
Path to HashSum                  @path_to_hashsum@
Path to Lua                      @path_to_lua@
Path to Pager                    @path_to_pager@
Pkg Class name                   Pkg
Lmod prefix                      @PREFIX@
Prepend order                    @prepend_block@
Supporting Full Settarg Use      @lmod_full_settarg_support@
Write cache after (sec)          @short_time@
Site Pkg location                standard
uname -a
Admin file                       ProjectDIR/src/../../etc/admin.list
Does Admin file exist            no
Active RC file(s):
ProjectDIR/init/lmodrc.lua
OutputDIR/.lmodrc.lua
 Lmod Property Table:
propT = {
  arch = {
    displayT = {
      gpu = {
        ["color"] = "red",
        ["doc"] = "built for GPU",
        ["long"] = "(g)",
        ["short"] = "(g)",
      },
      ["gpu:mic"] = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU",
        ["long"] = "(g,m)",
        ["short"] = "(gm)",
      },
      ["gpu:mic:offload"] = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU and offload to the MIC",
        ["long"] = "(g,m,o)",
        ["short"] = "(@)",
      },
      mic = {
        ["color"] = "blue",
        ["doc"] = "built for host and native MIC",
        ["long"] = "(m)",
        ["short"] = "(m)",
      },
      ["mic:offload"] = {
        ["color"] = "blue",
        ["doc"] = "built for host, native MIC and offload to the MIC",
        ["long"] = "(m,o)",
        ["short"] = "(*)",
      },
      offload = {
        ["color"] = "blue",
        ["doc"] = "built for offload to the MIC only",
        ["long"] = "(o)",
        ["short"] = "(o)",
      },
    },
    validT = {
      ["gpu"] = 1,
      ["mic"] = 1,
      ["offload"] = 1,
    },
  },
  lmod = {
    displayT = {
      sticky = {
        ["color"] = "red",
        ["doc"] = "Module is Sticky, requires --force to unload or purge",
        ["long"] = "(S)",
        ["short"] = "(S)",
      },
    },
    validT = {
      ["sticky"] = 1,
    },
  },
  state = {
    displayT = {
      experimental = {
        ["color"] = "blue",
        ["doc"] = "Experimental",
        ["long"] = "(E)",
        ["short"] = "(E)",
      },
      obsolete = {
        ["color"] = "red",
        ["doc"] = "Obsolete",
        ["long"] = "(O)",
        ["short"] = "(O)",
      },
      testing = {
        ["color"] = "green",
        ["doc"] = "Testing",
        ["long"] = "(T)",
        ["short"] = "(T)",
      },
    },
    validT = {
      ["experimental"] = 1,
      ["obsolete"] = 1,
      ["testing"] = 1,
    },
  },
}
lmod(-D unload Python){
  Lmod Version: 5.7.3 5.7.3 2014-08-09 11:25
  package.path: /?.lua;/?/init.lua;ProjectDIR/src/?.lua;ProjectDIR/src/../tools/?.lua;ProjectDIR/src/../shells/?.lua;ProjectDIR/src/?/init.lua;/opt/apps/luatools/5.1.2/share/lua/5.1/?.lua;./?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;
  Master:master(safe: true){
  } Master:master
  mt(){
    MT:new(){
      systemBaseMPATH:       "ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1:ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core"
      (1) o.systemBaseMPATH: "ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1:ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core"
      s: _ModuleTable_={["activeSize"]=13,baseMpathA={"ProjectDIR/rt/ifur/mf/core",},["c_rebuildTime"]=7200,["c_shortTime"]=0.233936,family={["easybuild"]="easybuild",},inactive={},mT={FFTW={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4",["default"]=0,["fullName"]="FFTW/3.3.4",["loadOrder"]=10,propT={},["short"]="FFTW",["status"]="active",},GCC={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1",["default"]=0,["fullName"]="GCC/4.9.1",["loadOrder"]=3,propT={},["short"]="GCC",["status"]="active",},OpenBLAS={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenBLAS/0.2.9",["default"]=0,["fullName"]="OpenBLAS/0.2.9",["loadOrder"]=11,propT={},["short"]="OpenBLAS",["status"]="active",},OpenMPI={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenMPI/1.8.1",["default"]=0,["fullName"]="OpenMPI/1.8.1",["loadOrder"]=9,propT={},["short"]="OpenMPI",["status"]="active",},OpenSSL={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenSSL/1.0.1f",["default"]=0,["fullName"]="OpenSSL/1.0.1f",["loadOrder"]=6,propT={},["short"]="OpenSSL",["status"]="active",},Python={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8",["default"]=1,["fullName"]="Python/2.7.8",["loadOrder"]=13,propT={},["short"]="Python",["status"]="active",},ScaLAPACK={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2",["default"]=0,["fullName"]="ScaLAPACK/2.0.2",["loadOrder"]=12,propT={},["short"]="ScaLAPACK",["status"]="active",},bzip2={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/bzip2/1.0.6",["default"]=0,["fullName"]="bzip2/1.0.6",["loadOrder"]=4,propT={},["short"]="bzip2",["status"]="active",},easybuild={["FN"]="ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua",["default"]=0,["fullName"]="easybuild/defaults",["loadOrder"]=1,propT={},["short"]="easybuild",["status"]="active",},hwloc={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/hwloc/1.9",["default"]=0,["fullName"]="hwloc/1.9",["loadOrder"]=8,propT={},["short"]="hwloc",["status"]="active",},numactl={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/numactl/2.0.9",["default"]=0,["fullName"]="numactl/2.0.9",["loadOrder"]=7,propT={},["short"]="numactl",["status"]="active",},stdenv={["FN"]="ProjectDIR/rt/ifur/mf/core/stdenv.lua",["default"]=0,["fullName"]="stdenv",["loadOrder"]=2,propT={lmod={["sticky"]=1,},},["short"]="stdenv",["status"]="active",},zlib={["FN"]="ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/zlib/1.2.8",["default"]=0,["fullName"]="zlib/1.2.8",["loadOrder"]=5,propT={},["short"]="zlib",["status"]="active",},},mpathA={"ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1","ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1","ProjectDIR/rt/ifur/mf/minerva/all/Core","ProjectDIR/rt/ifur/mf/core",},["systemBaseMPATH"]="ProjectDIR/rt/ifur/mf/core",["version"]=2,}
      (1) o._MPATH: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1:ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core
      (2) o.systemBaseMPATH: "ProjectDIR/rt/ifur/mf/core"
      baseMPATH: ProjectDIR/rt/ifur/mf/core
      buildBaseMpathA(ProjectDIR/rt/ifur/mf/core)
      (2) systemBaseMPATH: ProjectDIR/rt/ifur/mf/core
    } MT:new
    MT:setupMPATH(self,mpath: "ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1:ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core"){
    } MT:setupMPATH
    s_mt._same: true
  } mt
  BaseShell:expand(tbl){
    LMOD_DEFAULT_MODULEPATH="ProjectDIR/rt/ifur/mf/core";
    export LMOD_DEFAULT_MODULEPATH;
    MODULEPATH="ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1:ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core";
    export MODULEPATH;
  } BaseShell:expand
  cmd name: unload
  UnLoad(Python){
    MasterControl:unload_usr(mA){
      Master:master(safe: nil){
      } Master:master
      MasterControl:unload(mA={Python}){
        Master:unload(mA){
          MasterControl:_setMode("unload"){
          } MasterControl:_setMode
          Setting mcp to MC_Unload
          Setting mcp to MC_Unload
          Trying to unload: Python sn: Python
          Mark Python as pending
          MT:setStatus(Python,pending)
          Master:unload: "Python/2.7.8" from f: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8
          changePATH: 0
          loadModuleFile(){
            t.file: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8
            capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:GCC:GCC/4.9.1:bzip2:bzip2/1.0.6:zlib:zlib/1.2.8:OpenSSL:OpenSSL/1.0.1f:numactl:numactl/2.0.9:hwloc:hwloc/1.9:OpenMPI:OpenMPI/1.8.1:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f Python/2.7.8 -m remove -u Python -s bash ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8){
            } capture
            whatis(Description: Python is a programming language that lets you work more quickly and integrate your systems more effectively. - Homepage: http://python.org/ ){
            } whatis
            conflict(Python){
            }
            load_module(GCC/4.9.1){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={GCC/4.9.1}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: GCC/4.9.1 sn: GCC
                  Mark GCC/4.9.1 as pending
                  MT:setStatus(GCC,pending)
                  Master:unload: "GCC/4.9.1" from f: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:bzip2:bzip2/1.0.6:zlib:zlib/1.2.8:OpenSSL:OpenSSL/1.0.1f:numactl:numactl/2.0.9:hwloc:hwloc/1.9:OpenMPI:OpenMPI/1.8.1:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f GCC/4.9.1 -m remove -u GCC/4.9.1 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1){
                    } capture
                    whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,  as well as libraries for these languages (libstdc++, libgcj,...). - Homepage: http://gcc.gnu.org/ ){
                    } whatis
                    conflict(GCC){
                    }
                    prepend_path(MODULEPATH, ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1){
                      MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1", delim=":", nodups="nil", priority=0, where=first}{
                        calling reEvalModulePath()
                        MT:reEvalModulePath(adding: false, pathEntry: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1){
                          MT:_build_locationTbl(mpathA, adding: false, pathEntry: "ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1"){
                            Cache:cache(){
                              Cache:new(){
                                #scDescriptT: 0
                              } Cache.new
                            } Cache:cache
                            Cache:build(fast=true){
                              Cache:readCacheFile(cacheFileA){
                                LMOD_IGNORE_CACHE is true
                              } Cache:readCacheFile
                              Cache:readCacheFile(cacheFileA){
                                LMOD_IGNORE_CACHE is true
                              } Cache:readCacheFile
                              rebuilding cache for directory: ProjectDIR/rt/ifur/mf/core
                              Fast and dirsRead: 0
                            } Cache:build
                            moduleT: false
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1, ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1, , dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1, ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW, FFTW, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1, ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python, Python, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1, ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK, ScaLAPACK, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/Core, ProjectDIR/rt/ifur/mf/minerva/all/Core, , dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/Core, ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC, GCC, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/Core, ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi, gompi, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/minerva/all/Core, ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf, goolf, dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/core, ProjectDIR/rt/ifur/mf/core, , dirA, mnameT){
                            } walk_directory_for_mf
                            walk_directory_for_mf(ProjectDIR/rt/ifur/mf/core, ProjectDIR/rt/ifur/mf/core/easybuild, easybuild, dirA, mnameT){
                            } walk_directory_for_mf
                            mpath: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1
                            sn: FFTW
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4
                                key: version, value: 3.3.4
                                key: parseV, value: 000000003.000000003.000000004.*zfinal
                            sn: Python
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8
                                key: version, value: 2.7.8
                                key: parseV, value: 000000002.000000007.000000008.*zfinal
                            sn: ScaLAPACK
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2
                                key: version, value: 2.0.2
                                key: parseV, value: 000000002.000000000.000000002.*zfinal
                            mpath: ProjectDIR/rt/ifur/mf/minerva/all/Core
                            sn: gompi
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi/2.9.11
                                key: version, value: 2.9.11
                                key: parseV, value: 000000002.000000009.000000011.*zfinal
                            sn: GCC
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                                key: version, value: 4.9.1
                                key: parseV, value: 000000004.000000009.000000001.*zfinal
                            sn: goolf
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf/2.9.11
                                key: version, value: 2.9.11
                                key: parseV, value: 000000002.000000009.000000011.*zfinal
                            mpath: ProjectDIR/rt/ifur/mf/core
                            sn: easybuild
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua
                                key: version, value: defaults
                                key: parseV, value: *defaults.*zfinal
                            sn: stdenv
                              k: 0
                                key: fn, value: ProjectDIR/rt/ifur/mf/core/stdenv.lua
                                key: mpath, value: ProjectDIR/rt/ifur/mf/core
                                key: canonical, value: ProjectDIR/rt/ifur/mf/core/stdenv
                            availT: 
                              mpath: ProjectDIR/rt/ifur/mf/core:
                                easybuild: defaults,
                                stdenv:
                              mpath: ProjectDIR/rt/ifur/mf/minerva/all/Core:
                                GCC: 4.9.1,
                                gompi: 2.9.11,
                                goolf: 2.9.11,
                              mpath: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1:
                                FFTW: 3.3.4,
                                Python: 2.7.8,
                                ScaLAPACK: 2.0.2,
                            locationT: 
                              sn: FFTW:
                                ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4
                              sn: GCC:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                              sn: Python:
                                ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8
                              sn: ScaLAPACK:
                                ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2
                              sn: easybuild:
                                ProjectDIR/rt/ifur/mf/core/easybuild
                                last Default: ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua
                              sn: gompi:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi/2.9.11
                              sn: goolf:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf/2.9.11
                              sn: stdenv:
                                ProjectDIR/rt/ifur/mf/core/stdenv
                                last Default: ProjectDIR/rt/ifur/mf/core/stdenv.lua
                          } MT:_build_locationTbl
                          set self._availT
                        } MT:reEvalModulePath
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(CPATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/lib64){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/lib64", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/lib64){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/lib64", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(MANPATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/share/man){
                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/share/man", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/Core/GCC/4.9.1/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Core/GCC/4.9.1/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTGCC, /csc/minerva/2.1/software/Core/GCC/4.9.1){
                      MasterControl:unsetenv("EBROOTGCC", "/csc/minerva/2.1/software/Core/GCC/4.9.1"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONGCC, 4.9.1){
                      MasterControl:unsetenv("EBVERSIONGCC", "4.9.1"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELGCC, /csc/minerva/2.1/software/Core/GCC/4.9.1/easybuild/Core-GCC-4.9.1-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELGCC", "/csc/minerva/2.1/software/Core/GCC/4.9.1/easybuild/Core-GCC-4.9.1-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("GCC")
                  changePATH: 0 Zombie state: true mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(bzip2/1.0.6){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={bzip2/1.0.6}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: bzip2/1.0.6 sn: bzip2
                  Mark bzip2/1.0.6 as pending
                  MT:setStatus(bzip2,pending)
                  Master:unload: "bzip2/1.0.6" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/bzip2/1.0.6
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/bzip2/1.0.6
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:zlib:zlib/1.2.8:OpenSSL:OpenSSL/1.0.1f:numactl:numactl/2.0.9:hwloc:hwloc/1.9:OpenMPI:OpenMPI/1.8.1:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f bzip2/1.0.6 -m remove -u bzip2/1.0.6 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/bzip2/1.0.6){
                    } capture
                    whatis(Description: bzip2 is a freely available, patent free, high-quality data compressor. It typically  compresses files to within 10% to 15% of the best available techniques (the PPM family of statistical  compressors), whilst being around twice as fast at compression and six times faster at decompression. - Homepage: http://www.bzip.org/ ){
                    } whatis
                    conflict(bzip2){
                    }
                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(MANPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/man){
                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/man", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTBZIP2, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6){
                      MasterControl:unsetenv("EBROOTBZIP2", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONBZIP2, 1.0.6){
                      MasterControl:unsetenv("EBVERSIONBZIP2", "1.0.6"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELBZIP2, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/easybuild/Compiler-GCC-4.9.1-bzip2-1.0.6-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELBZIP2", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/bzip2/1.0.6/easybuild/Compiler-GCC-4.9.1-bzip2-1.0.6-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("bzip2")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(zlib/1.2.8){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={zlib/1.2.8}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: zlib/1.2.8 sn: zlib
                  Mark zlib/1.2.8 as pending
                  MT:setStatus(zlib,pending)
                  Master:unload: "zlib/1.2.8" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/zlib/1.2.8
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/zlib/1.2.8
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:OpenSSL:OpenSSL/1.0.1f:numactl:numactl/2.0.9:hwloc:hwloc/1.9:OpenMPI:OpenMPI/1.8.1:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f zlib/1.2.8 -m remove -u zlib/1.2.8 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/zlib/1.2.8){
                    } capture
                    whatis(Description: zlib is designed to be a free, general-purpose, legally unencumbered -- that is,  not covered by any patents -- lossless data-compression library for use on virtually any  computer hardware and operating system. - Homepage: http://www.zlib.net/ ){
                    } whatis
                    conflict(zlib){
                    }
                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(MANPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/share/man){
                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/share/man", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib/pkgconfig){
                      MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTZLIB, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8){
                      MasterControl:unsetenv("EBROOTZLIB", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONZLIB, 1.2.8){
                      MasterControl:unsetenv("EBVERSIONZLIB", "1.2.8"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELZLIB, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/easybuild/Compiler-GCC-4.9.1-zlib-1.2.8-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELZLIB", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/zlib/1.2.8/easybuild/Compiler-GCC-4.9.1-zlib-1.2.8-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("zlib")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(OpenSSL/1.0.1f){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={OpenSSL/1.0.1f}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: OpenSSL/1.0.1f sn: OpenSSL
                  Mark OpenSSL/1.0.1f as pending
                  MT:setStatus(OpenSSL,pending)
                  Master:unload: "OpenSSL/1.0.1f" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenSSL/1.0.1f
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenSSL/1.0.1f
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:numactl:numactl/2.0.9:hwloc:hwloc/1.9:OpenMPI:OpenMPI/1.8.1:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f OpenSSL/1.0.1f -m remove -u OpenSSL/1.0.1f -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenSSL/1.0.1f){
                    } capture
                    whatis(Description: The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured,  and Open Source toolchain implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1)   protocols as well as a full-strength general purpose cryptography library.  - Homepage: http://www.openssl.org/ ){
                    } whatis
                    conflict(OpenSSL){
                    }
                    load_module(zlib/1.2.8){
                      cmd: load arg.n: 1
                      mcp:name(): MC_Unload
                      Master:master(safe: nil){
                      } Master:master
                      MasterControl:unload(mA={zlib/1.2.8}){
                        Master:unload(mA){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
                          Trying to unload: zlib/1.2.8 sn: false
                          changePATH: 0 Zombie state: false mStack:empty(): false
                          Setting mcp to MC_Unload
                        } Master:unload
                      } MasterControl:unload
                    } load_module
                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib/pkgconfig){
                      MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTOPENSSL, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f){
                      MasterControl:unsetenv("EBROOTOPENSSL", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONOPENSSL, 1.0.1f){
                      MasterControl:unsetenv("EBVERSIONOPENSSL", "1.0.1f"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELOPENSSL, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/easybuild/Compiler-GCC-4.9.1-OpenSSL-1.0.1f-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELOPENSSL", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenSSL/1.0.1f/easybuild/Compiler-GCC-4.9.1-OpenSSL-1.0.1f-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("OpenSSL")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(OpenMPI/1.8.1){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={OpenMPI/1.8.1}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: OpenMPI/1.8.1 sn: OpenMPI
                  Mark OpenMPI/1.8.1 as pending
                  MT:setStatus(OpenMPI,pending)
                  Master:unload: "OpenMPI/1.8.1" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenMPI/1.8.1
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenMPI/1.8.1
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:numactl:numactl/2.0.9:hwloc:hwloc/1.9:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f OpenMPI/1.8.1 -m remove -u OpenMPI/1.8.1 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenMPI/1.8.1){
                    } capture
                    whatis(Description: The Open MPI Project is an open source MPI-2 implementation. - Homepage: http://www.open-mpi.org/ ){
                    } whatis
                    conflict(OpenMPI){
                    }
                    prepend_path(MODULEPATH, ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1){
                      MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1", delim=":", nodups="nil", priority=0, where=first}{
                        calling reEvalModulePath()
                        MT:reEvalModulePath(adding: false, pathEntry: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1){
                          MT:_build_locationTbl(mpathA, adding: false, pathEntry: "ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1"){
                            Fast removal of directory: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1
                            mpath: ProjectDIR/rt/ifur/mf/minerva/all/Core
                            sn: gompi
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi/2.9.11
                                key: version, value: 2.9.11
                                key: parseV, value: 000000002.000000009.000000011.*zfinal
                            sn: GCC
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                                key: version, value: 4.9.1
                                key: parseV, value: 000000004.000000009.000000001.*zfinal
                            sn: goolf
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf/2.9.11
                                key: version, value: 2.9.11
                                key: parseV, value: 000000002.000000009.000000011.*zfinal
                            mpath: ProjectDIR/rt/ifur/mf/core
                            sn: easybuild
                              k: 1
                                key: fn, value: ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua
                                key: version, value: defaults
                                key: parseV, value: *defaults.*zfinal
                            sn: stdenv
                              k: 0
                                key: fn, value: ProjectDIR/rt/ifur/mf/core/stdenv.lua
                                key: mpath, value: ProjectDIR/rt/ifur/mf/core
                                key: canonical, value: ProjectDIR/rt/ifur/mf/core/stdenv
                            availT: 
                              mpath: ProjectDIR/rt/ifur/mf/core:
                                easybuild: defaults,
                                stdenv:
                              mpath: ProjectDIR/rt/ifur/mf/minerva/all/Core:
                                GCC: 4.9.1,
                                gompi: 2.9.11,
                                goolf: 2.9.11,
                            locationT: 
                              sn: GCC:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/GCC/4.9.1
                              sn: easybuild:
                                ProjectDIR/rt/ifur/mf/core/easybuild
                                last Default: ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua
                              sn: gompi:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/gompi/2.9.11
                              sn: goolf:
                                ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf
                                last Default: ProjectDIR/rt/ifur/mf/minerva/all/Core/goolf/2.9.11
                              sn: stdenv:
                                ProjectDIR/rt/ifur/mf/core/stdenv
                                last Default: ProjectDIR/rt/ifur/mf/core/stdenv.lua
                          } MT:_build_locationTbl
                          set self._availT
                        } MT:reEvalModulePath
                      } MasterControl:remove_path
                    } prepend_path
                    load_module(hwloc/1.9){
                      cmd: load arg.n: 1
                      mcp:name(): MC_Unload
                      Master:master(safe: nil){
                      } Master:master
                      MasterControl:unload(mA={hwloc/1.9}){
                        Master:unload(mA){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
                          Trying to unload: hwloc/1.9 sn: hwloc
                          Mark hwloc/1.9 as pending
                          MT:setStatus(hwloc,pending)
                          Master:unload: "hwloc/1.9" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/hwloc/1.9
                          changePATH: 2
                          loadModuleFile(){
                            t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/hwloc/1.9
                            capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:numactl:numactl/2.0.9:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f hwloc/1.9 -m remove -u hwloc/1.9 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/hwloc/1.9){
                            } capture
                            whatis(Description: The Portable Hardware Locality (hwloc) software package provides a portable abstraction  (across OS, versions, architectures, ...) of the hierarchical topology of modern architectures, including  NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading. It also gathers various  system attributes such as cache and memory information as well as the locality of I/O devices such as  network interfaces, InfiniBand HCAs or GPUs. It primarily aims at helping applications with gathering  information about modern computing hardware so as to exploit it accordingly and efficiently. - Homepage: http://www.open-mpi.org/projects/hwloc/ ){
                            } whatis
                            conflict(hwloc){
                            }
                            load_module(numactl/2.0.9){
                              cmd: load arg.n: 1
                              mcp:name(): MC_Unload
                              Master:master(safe: nil){
                              } Master:master
                              MasterControl:unload(mA={numactl/2.0.9}){
                                Master:unload(mA){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
                                  Trying to unload: numactl/2.0.9 sn: numactl
                                  Mark numactl/2.0.9 as pending
                                  MT:setStatus(numactl,pending)
                                  Master:unload: "numactl/2.0.9" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/numactl/2.0.9
                                  changePATH: 3
                                  loadModuleFile(){
                                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/numactl/2.0.9
                                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:FFTW:FFTW/3.3.4:OpenBLAS:OpenBLAS/0.2.9:ScaLAPACK:ScaLAPACK/2.0.2" -f numactl/2.0.9 -m remove -u numactl/2.0.9 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/numactl/2.0.9){
                                    } capture
                                    whatis(Description: The numactl program allows you to run your application program on specific cpu's and memory nodes. It does this by supplying a NUMA memory policy to the operating system before running your program. The libnuma library provides convenient ways for you to add NUMA memory policies into your own program. - Homepage: http://oss.sgi.com/projects/libnuma/ ){
                                    } whatis
                                    conflict(numactl){
                                    }
                                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/include){
                                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/include", delim=":", nodups="nil", priority=0, where=first}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/lib){
                                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/lib){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(MANPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/share/man){
                                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/share/man", delim=":", nodups="nil", priority=0, where=first}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/bin){
                                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/bin", delim=":", nodups="nil", priority=0, where=first}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    setenv(EBROOTNUMACTL, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9){
                                      MasterControl:unsetenv("EBROOTNUMACTL", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBVERSIONNUMACTL, 2.0.9){
                                      MasterControl:unsetenv("EBVERSIONNUMACTL", "2.0.9"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBDEVELNUMACTL, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/easybuild/Compiler-GCC-4.9.1-numactl-2.0.9-easybuild-devel){
                                      MasterControl:unsetenv("EBDEVELNUMACTL", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/numactl/2.0.9/easybuild/Compiler-GCC-4.9.1-numactl-2.0.9-easybuild-devel"){
                                      } MasterControl:unsetenv
                                    } setenv
                                  } loadModuleFile
                                  changePATH: 2
                                  calling mt:remove("numactl")
                                  changePATH: 2 Zombie state: false mStack:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:unload
                            } load_module
                            prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/include){
                              MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/include", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib){
                              MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib){
                              MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MANPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/share/man){
                              MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/share/man", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/bin){
                              MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/bin", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib/pkgconfig){
                              MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(EBROOTHWLOC, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9){
                              MasterControl:unsetenv("EBROOTHWLOC", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONHWLOC, 1.9){
                              MasterControl:unsetenv("EBVERSIONHWLOC", "1.9"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELHWLOC, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/easybuild/Compiler-GCC-4.9.1-hwloc-1.9-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELHWLOC", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/hwloc/1.9/easybuild/Compiler-GCC-4.9.1-hwloc-1.9-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                          } loadModuleFile
                          changePATH: 1
                          calling mt:remove("hwloc")
                          changePATH: 1 Zombie state: false mStack:empty(): false
                          Setting mcp to MC_Unload
                        } Master:unload
                      } MasterControl:unload
                    } load_module
                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(MANPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/share/man){
                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/share/man", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib/pkgconfig){
                      MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTOPENMPI, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1){
                      MasterControl:unsetenv("EBROOTOPENMPI", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONOPENMPI, 1.8.1){
                      MasterControl:unsetenv("EBVERSIONOPENMPI", "1.8.1"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELOPENMPI, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/easybuild/Compiler-GCC-4.9.1-OpenMPI-1.8.1-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELOPENMPI", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenMPI/1.8.1/easybuild/Compiler-GCC-4.9.1-OpenMPI-1.8.1-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("OpenMPI")
                  changePATH: 0 Zombie state: true mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(OpenBLAS/0.2.9){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={OpenBLAS/0.2.9}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: OpenBLAS/0.2.9 sn: OpenBLAS
                  Mark OpenBLAS/0.2.9 as pending
                  MT:setStatus(OpenBLAS,pending)
                  Master:unload: "OpenBLAS/0.2.9" from f: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenBLAS/0.2.9
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenBLAS/0.2.9
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:FFTW:FFTW/3.3.4:ScaLAPACK:ScaLAPACK/2.0.2" -f OpenBLAS/0.2.9 -m remove -u OpenBLAS/0.2.9 -s bash ProjectDIR/rt/ifur/mf/minerva/all/Compiler/GCC/4.9.1/OpenBLAS/0.2.9){
                    } capture
                    whatis(Description: OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. - Homepage: http://xianyi.github.com/OpenBLAS/ ){
                    } whatis
                    conflict(OpenBLAS){
                    }
                    prepend_path(CPATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTOPENBLAS, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9){
                      MasterControl:unsetenv("EBROOTOPENBLAS", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONOPENBLAS, 0.2.9){
                      MasterControl:unsetenv("EBVERSIONOPENBLAS", "0.2.9"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELOPENBLAS, /csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/easybuild/Compiler-GCC-4.9.1-OpenBLAS-0.2.9-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELOPENBLAS", "/csc/minerva/2.1/software/Compiler/GCC/4.9.1/OpenBLAS/0.2.9/easybuild/Compiler-GCC-4.9.1-OpenBLAS-0.2.9-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("OpenBLAS")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(FFTW/3.3.4){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={FFTW/3.3.4}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: FFTW/3.3.4 sn: FFTW
                  Mark FFTW/3.3.4 as pending
                  MT:setStatus(FFTW,pending)
                  Master:unload: "FFTW/3.3.4" from f: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv:ScaLAPACK:ScaLAPACK/2.0.2" -f FFTW/3.3.4 -m remove -u FFTW/3.3.4 -s bash ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4){
                    } capture
                    whatis(Description: FFTW is a C subroutine library for computing the discrete Fourier transform (DFT)  in one or more dimensions, of arbitrary input size, and of both real and complex data. - Homepage: http://www.fftw.org ){
                    } whatis
                    conflict(FFTW){
                    }
                    prepend_path(CPATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(MANPATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/share/man){
                      MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/share/man", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/bin){
                      MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/bin", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib/pkgconfig){
                      MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTFFTW, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4){
                      MasterControl:unsetenv("EBROOTFFTW", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONFFTW, 3.3.4){
                      MasterControl:unsetenv("EBVERSIONFFTW", "3.3.4"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELFFTW, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-FFTW-3.3.4-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELFFTW", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/FFTW/3.3.4/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-FFTW-3.3.4-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("FFTW")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            load_module(ScaLAPACK/2.0.2){
              cmd: load arg.n: 1
              mcp:name(): MC_Unload
              Master:master(safe: nil){
              } Master:master
              MasterControl:unload(mA={ScaLAPACK/2.0.2}){
                Master:unload(mA){
                  MasterControl:_setMode("unload"){
                  } MasterControl:_setMode
                  Setting mcp to MC_Unload
                  Setting mcp to MC_Unload
                  Trying to unload: ScaLAPACK/2.0.2 sn: ScaLAPACK
                  Mark ScaLAPACK/2.0.2 as pending
                  MT:setStatus(ScaLAPACK,pending)
                  Master:unload: "ScaLAPACK/2.0.2" from f: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2
                  changePATH: 0
                  loadModuleFile(){
                    t.file: ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2
                    capture(ProjectDIR/src/tcl2lua.tcl -l "easybuild:easybuild/defaults:stdenv" -f ScaLAPACK/2.0.2 -m remove -u ScaLAPACK/2.0.2 -s bash ProjectDIR/rt/ifur/mf/minerva/all/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2){
                    } capture
                    whatis(Description: The ScaLAPACK (or Scalable LAPACK) library includes a subset of LAPACK routines  redesigned for distributed memory MIMD parallel computers. - Homepage: http://www.netlib.org/scalapack/ ){
                    } whatis
                    conflict(ScaLAPACK){
                    }
                    load_module(OpenBLAS/0.2.9){
                      cmd: load arg.n: 1
                      mcp:name(): MC_Unload
                      Master:master(safe: nil){
                      } Master:master
                      MasterControl:unload(mA={OpenBLAS/0.2.9}){
                        Master:unload(mA){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
                          Trying to unload: OpenBLAS/0.2.9 sn: false
                          changePATH: 0 Zombie state: false mStack:empty(): false
                          Setting mcp to MC_Unload
                        } Master:unload
                      } MasterControl:unload
                    } load_module
                    prepend_path(CPATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/include){
                      MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/include", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/lib){
                      MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/lib){
                      MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/lib", delim=":", nodups="nil", priority=0, where=first}{
                      } MasterControl:remove_path
                    } prepend_path
                    setenv(EBROOTSCALAPACK, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2){
                      MasterControl:unsetenv("EBROOTSCALAPACK", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBVERSIONSCALAPACK, 2.0.2){
                      MasterControl:unsetenv("EBVERSIONSCALAPACK", "2.0.2"){
                      } MasterControl:unsetenv
                    } setenv
                    setenv(EBDEVELSCALAPACK, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-ScaLAPACK-2.0.2-easybuild-devel){
                      MasterControl:unsetenv("EBDEVELSCALAPACK", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/ScaLAPACK/2.0.2/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-ScaLAPACK-2.0.2-easybuild-devel"){
                      } MasterControl:unsetenv
                    } setenv
                  } loadModuleFile
                  changePATH: 0
                  calling mt:remove("ScaLAPACK")
                  changePATH: 0 Zombie state: false mStack:empty(): false
                  Setting mcp to MC_Unload
                } Master:unload
              } MasterControl:unload
            } load_module
            prepend_path(CPATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/include){
              MasterControl:remove_path{"CPATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/include", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            prepend_path(LD_LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib){
              MasterControl:remove_path{"LD_LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            prepend_path(LIBRARY_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib){
              MasterControl:remove_path{"LIBRARY_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            prepend_path(MANPATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/share/man){
              MasterControl:remove_path{"MANPATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/share/man", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            prepend_path(PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/bin){
              MasterControl:remove_path{"PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/bin", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            prepend_path(PKG_CONFIG_PATH, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib/pkgconfig){
              MasterControl:remove_path{"PKG_CONFIG_PATH", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/lib/pkgconfig", delim=":", nodups="nil", priority=0, where=first}{
              } MasterControl:remove_path
            } prepend_path
            setenv(EBROOTPYTHON, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8){
              MasterControl:unsetenv("EBROOTPYTHON", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8"){
              } MasterControl:unsetenv
            } setenv
            setenv(EBVERSIONPYTHON, 2.7.8){
              MasterControl:unsetenv("EBVERSIONPYTHON", "2.7.8"){
              } MasterControl:unsetenv
            } setenv
            setenv(EBDEVELPYTHON, /csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-Python-2.7.8-easybuild-devel){
              MasterControl:unsetenv("EBDEVELPYTHON", "/csc/minerva/2.1/software/MPI/GCC/4.9.1/OpenMPI/1.8.1/Python/2.7.8/easybuild/MPI-GCC-4.9.1-OpenMPI-1.8.1-Python-2.7.8-easybuild-devel"){
              } MasterControl:unsetenv
            } setenv
            setenv(EBEXTSLISTPYTHON, setuptools-1.4.2,pip-1.2.1,nose-1.3.0,numpy-1.8.0,scipy-0.13.1,mpi4py-1.3.1,paycheck-1.0.2,argparse-1.2.1,lockfile-0.9.1,Cython-0.19.2,dateutil-2.2,deap-0.9.1,decorator-3.4.0,arff-1.1,pycrypto-2.6.1,paramiko-1.12.0){
              MasterControl:unsetenv("EBEXTSLISTPYTHON", "setuptools-1.4.2,pip-1.2.1,nose-1.3.0,numpy-1.8.0,scipy-0.13.1,mpi4py-1.3.1,paycheck-1.0.2,argparse-1.2.1,lockfile-0.9.1,Cython-0.19.2,dateutil-2.2,deap-0.9.1,decorator-3.4.0,arff-1.1,pycrypto-2.6.1,paramiko-1.12.0"){
              } MasterControl:unsetenv
            } setenv
          } loadModuleFile
          changePATH: 0
          calling mt:remove("Python")
          changePATH: 0 Zombie state: false mStack:empty(): true
          Setting mcp to MC_Load
        } Master:unload
      } MasterControl:unload
      Master:master(safe: nil){
      } Master:master
      Master:reload_sticky(){
      } Master:reload_sticky
    } MasterControl:unload_usr
  } UnLoad
  Master:master(safe: nil){
  } Master:master
  MT:reportChanges(){
    MT.origMT(){
    } MT.origMT
  } MT:reportChanges
} Lmod
BaseShell:expand(tbl){
  unset CPATH;
  unset EBDEVELBZIP2;
  unset EBDEVELFFTW;
  unset EBDEVELGCC;
  unset EBDEVELHWLOC;
  unset EBDEVELNUMACTL;
  unset EBDEVELOPENBLAS;
  unset EBDEVELOPENMPI;
  unset EBDEVELOPENSSL;
  unset EBDEVELPYTHON;
  unset EBDEVELSCALAPACK;
  unset EBDEVELZLIB;
  unset EBEXTSLISTPYTHON;
  unset EBROOTBZIP2;
  unset EBROOTFFTW;
  unset EBROOTGCC;
  unset EBROOTHWLOC;
  unset EBROOTNUMACTL;
  unset EBROOTOPENBLAS;
  unset EBROOTOPENMPI;
  unset EBROOTOPENSSL;
  unset EBROOTPYTHON;
  unset EBROOTSCALAPACK;
  unset EBROOTZLIB;
  unset EBVERSIONBZIP2;
  unset EBVERSIONFFTW;
  unset EBVERSIONGCC;
  unset EBVERSIONHWLOC;
  unset EBVERSIONNUMACTL;
  unset EBVERSIONOPENBLAS;
  unset EBVERSIONOPENMPI;
  unset EBVERSIONOPENSSL;
  unset EBVERSIONPYTHON;
  unset EBVERSIONSCALAPACK;
  unset EBVERSIONZLIB;
  unset LD_LIBRARY_PATH;
  unset LIBRARY_PATH;
  LMOD_DEFAULT_MODULEPATH="ProjectDIR/rt/ifur/mf/core";
  export LMOD_DEFAULT_MODULEPATH;
  LOADEDMODULES="easybuild/defaults:stdenv";
  export LOADEDMODULES;
  unset MANPATH;
  MODULEPATH="ProjectDIR/rt/ifur/mf/minerva/all/Core:ProjectDIR/rt/ifur/mf/core";
  export MODULEPATH;
  PATH="~/bin:ProjectDIR/src:PATH_to_TM:/bin";
  export PATH;
  unset PKG_CONFIG_PATH;
  _LMFILES_="ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua:ProjectDIR/rt/ifur/mf/core/stdenv.lua";
  export _LMFILES_;
  BaseShell:expandMT(vstr){
    _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09MixiYXNlTXBhdGhBPXsiL1VzZXJzL21jbGF5L3cvbG1vZC9ydC9pZnVyL21mL2NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09NzIwMCxbImNfc2hvcnRUaW1lIl09MC4yMzM5MzYsZmFtaWx5PXtbImVhc3lidWlsZCJdPSJlYXN5YnVpbGQiLH0saW5hY3RpdmU9e30sbVQ9e2Vhc3lidWlsZD17WyJGTiJdPSIvVXNlcnMvbWNsYXkvdy9sbW9kL3J0L2lmdXIvbWYvY29yZS9lYXN5YnVpbGQvZGVmYXVsdHMubHVhIixbImRlZmF1bHQiXT0wLFsiZnVsbE5hbWUiXT0iZWFzeWJ1aWxkL2RlZmF1bHRzIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJlYXN5YnVpbGQiLFsic3RhdHVzIl09ImFjdGl2ZSIsfSxzdGRl";
    export _ModuleTable001_;
    _ModuleTable002_="bnY9e1siRk4iXT0iL1VzZXJzL21jbGF5L3cvbG1vZC9ydC9pZnVyL21mL2NvcmUvc3RkZW52Lmx1YSIsWyJkZWZhdWx0Il09MCxbImZ1bGxOYW1lIl09InN0ZGVudiIsWyJsb2FkT3JkZXIiXT0yLHByb3BUPXtsbW9kPXtbInN0aWNreSJdPTEsfSx9LFsic2hvcnQiXT0ic3RkZW52IixbInN0YXR1cyJdPSJhY3RpdmUiLH0sfSxtcGF0aEE9eyIvVXNlcnMvbWNsYXkvdy9sbW9kL3J0L2lmdXIvbWYvbWluZXJ2YS9hbGwvQ29yZSIsIi9Vc2Vycy9tY2xheS93L2xtb2QvcnQvaWZ1ci9tZi9jb3JlIix9LFsic3lzdGVtQmFzZU1QQVRIIl09Ii9Vc2Vycy9tY2xheS93L2xtb2QvcnQvaWZ1ci9tZi9jb3JlIixbInZlcnNpb24iXT0yLH0=";
    export _ModuleTable002_;
    _ModuleTable_Sz_="2";
    export _ModuleTable_Sz_;
    _ModuleTable_ = {
      ["activeSize"] = 2,
      baseMpathA = {
        "ProjectDIR/rt/ifur/mf/core",
      },
      ["c_rebuildTime"] = 7200,
      ["c_shortTime"] = 0.233936,
      family = {
        ["easybuild"] = "easybuild",
      },
      inactive = {
          },
      mT = {
        easybuild = {
          ["FN"] = "ProjectDIR/rt/ifur/mf/core/easybuild/defaults.lua",
          ["default"] = 0,
          ["fullName"] = "easybuild/defaults",
          ["loadOrder"] = 1,
          propT = {
                  },
          ["short"] = "easybuild",
          ["status"] = "active",
        },
        stdenv = {
          ["FN"] = "ProjectDIR/rt/ifur/mf/core/stdenv.lua",
          ["default"] = 0,
          ["fullName"] = "stdenv",
          ["loadOrder"] = 2,
          propT = {
            lmod = {
              ["sticky"] = 1,
            },
          },
          ["short"] = "stdenv",
          ["status"] = "active",
        },
      },
      mpathA = {
        "ProjectDIR/rt/ifur/mf/minerva/all/Core", "ProjectDIR/rt/ifur/mf/core",
      },
      ["systemBaseMPATH"] = "ProjectDIR/rt/ifur/mf/core",
      ["version"] = 2,
    }
  } BaseShell:expandMT
} BaseShell:expand
Exec:exec(){
} Exec:exec
===========================
step 9
lua ProjectDIR/src/lmod.in.lua bash list
===========================
Currently Loaded Modules:
  1) easybuild/defaults   2) stdenv (S)
  Where:
   (S):  Module is Sticky, requires --force to unload or purge
