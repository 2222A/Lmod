-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"avail" },

   active = 1,
   testName = "avail",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh
     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     MODULEPATH=$(projectDir)/mf//Core:$(testDir)/mf/Core//
     export MODULEPATH
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`
     unset TERM

     rm -fr _stderr.*  _stdout.* out.* err.* .lmod.d
     cp $(projectDir)/init/.lmodrc.lua .


     runMe lua $(projectDir)/src/lmod.in.lua bash --version                # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash load intel               # 2
     runMe lua $(projectDir)/src/lmod.in.lua bash avail                    # 3

     runMe lua $(projectDir)/src/lmod.in.lua bash avail gcc intel p a j m  # 4
     runMe lua $(projectDir)/src/lmod.in.lua bash unload intel             # 5
     runMe lua $(projectDir)/src/lmod.in.lua bash avail                    # 6
     runMe lua $(projectDir)/src/lmod.in.lua bash -t    avail              # 7
     runMe lua $(projectDir)/src/lmod.in.lua bash -t -d avail              # 8
     runMe lua $(projectDir)/src/lmod.in.lua bash -t    avail git          # 9
     runMe lua $(projectDir)/src/lmod.in.lua bash -t -d avail git          #10
     runMe lua $(projectDir)/src/lmod.in.lua bash -t    avail git/1.7.4.3  #11
     runMe lua $(projectDir)/src/lmod.in.lua bash use $(testDir)/mf/Core2  #12
     runMe lua $(projectDir)/src/lmod.in.lua bash avail local              #13

     
     


     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
