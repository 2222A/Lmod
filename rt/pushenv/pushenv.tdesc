-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"pushenv" },

   active = 1,
   testName = "pushenv",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/mf/Core;     export MODULEPATH
     MODULEPATH_ROOT=$(testDir)/mf;     export MODULEPATH_ROOT

     numStep=0
     COUNT=0
     HOME_ORIG=`(cd $HOME; /bin/pwd)`
     HOME=$(outputDir)
     RTM_SETTARG_CMD=":";               export RTM_SETTARG_CMD

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runLmod --version        # 1
     runLmod load intel       # 2
     runLmod load mpich       # 3
     runLmod load clang       # 4
     runLmod unload clang     # 5
     runLmod unload mpich     # 6
     runLmod unload intel     # 7
     runLmod load intel mpich # 8
     runLmod unload intel     # 9
     runLmod load intel       # 0
     runLmod load settarg     #11
     runLmod unload settarg   #12

     runLmod save             #13
     runLmod restore          #14

     HOME_ORIG=$HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
