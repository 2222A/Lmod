-- -*- lua -*-

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"perl" },

   active = 1;
   testName = "perl",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH_ROOT=$(testDir)/mf;     export MODULEPATH_ROOT
     MODULEPATH="$(testDir)/mf/Core";   export MODULEPATH

     numStep=0
     COUNT=0
     HOME=`(cd $HOME; /bin/pwd)`

     mkdir setup
     sed -e 's|@PKG@/libexec/lmod|lua $(projectDir)/src/lmod.in.lua|g' \
              < $(projectDir)/setup/perl.in > setup/perl

cat > $(testName).pl << EOF
#!/usr/bin/env perl
use strict;

require "$(outputDir)/setup/perl";

module("load foobar");

print "\\\$ENV{FOOBAR}: ".\$ENV{"FOOBAR"}."\n";

module("avail");
EOF



     rm -f _stderr.* _stdout.* err.* out.*

     chmod +x $(testName).pl
     ./$(testName).pl  > _stdout.000 2> _stderr.000

     cleanUp _stdout.000 out.txt
     cleanUp _stderr.000 err.txt
     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
