-- -*- lua -*-
local testName = "columnT"
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = { testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/modules:$(testDir)/modules-npa; export MODULEPATH


     numStep=0
     COUNT=0
     HOME_ORIG=`(cd $HOME; /bin/pwd)`
     HOME=`pwd`;                        export HOME

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     m1=" 
         "



     runMe lua $(projectDir)/src/lmod.in.lua bash --version                    # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash avail                        # 2
     runMe lua $(projectDir)/src/lmod.in.lua bash load mpi.zlib.hdf5.netcdf    # 3
     runMe lua $(projectDir)/src/lmod.in.lua bash load python2.7.cython.numpy.scipy.numexpr.scientific.matplotlib #4
     runMe lua $(projectDir)/src/lmod.in.lua bash load fftw/2.1.5 grace/5.1.23 # 5
     runMe lua $(projectDir)/src/lmod.in.lua bash list                         # 6
     runMe lua $(projectDir)/src/getmt.in.lua --regressionTesting -2           # 7

     HOME_ORIG=$HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
