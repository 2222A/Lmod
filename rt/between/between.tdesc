-- -*- lua -*-
local testName = "between"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test between
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(testDir)/mf;    export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core; export MODULEPATH
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`


     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runMe lua $(projectDir)/src/lmod.in.lua bash --version              # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash load M1                # 2
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   # 3
     runMe lua $(projectDir)/src/lmod.in.lua bash load M2                # 4
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   # 5
     runMe lua $(projectDir)/src/lmod.in.lua bash load M4                # 6
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   # 7
     runMe lua $(projectDir)/src/lmod.in.lua bash load M5                # 8
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   # 9
     runMe lua $(projectDir)/src/lmod.in.lua bash load -a M6             #10
     runMe lua $(projectDir)/src/lmod.in.lua bash load a/1.3 M6          #11
     runMe lua $(projectDir)/src/lmod.in.lua bash load a/1.4 M6          #12
     runMe lua $(projectDir)/src/lmod.in.lua bash load a/1.1 M6          #13
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   #14
     runMe lua $(projectDir)/src/lmod.in.lua bash load M7                #15
     runMe lua $(projectDir)/src/lmod.in.lua bash list                   #16
     runMe lua $(projectDir)/src/lmod.in.lua bash load M8                #17

     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
