-- -*- lua -*-

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"python" },

   active = 1,
   testName = "python",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH_ROOT=$(testDir)/mf;     export MODULEPATH_ROOT
     MODULEPATH="$(testDir)/mf/Core";   export MODULEPATH

     numStep=0
     COUNT=0
     HOME=`(cd $HOME; /bin/pwd)`

     mkdir setup
     sed -e 's|@PKG@/libexec/lmod|lua $(projectDir)/src/lmod.in.lua|g' \
              < $(projectDir)/setup/env_modules_python.py.in > setup/env_modules_python.py

     

cat > $(testName).py << EOF
#!/usr/bin/env python

import os, sys
sys.path.insert(0,"$(outputDir)/setup/")

from env_modules_python import module

module("load","foobar")

print "os.environ['FOOBAR']: ",os.environ['FOOBAR']

module("avail");
EOF



     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     chmod +x $(testName).py
     ./$(testName).py  > _stdout.000 2> _stderr.000

     cleanUp _stdout.000 out.txt
     cleanUp _stderr.000 err.txt
     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
