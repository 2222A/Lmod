-- -*- lua -*-
inactiveTbl = { Darwin = 1, }
local function isActive()
   require("posix")
   local osName = posix.uname("%s")
   return (not inactiveTbl[osName])
end

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"default","setdefault", "getdefault","setgetdefault","getsetdefault" },

   active = 1,
   testName = "saverestore",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/TACC;        export MODULEPATH
     MODULEPATH_ROOT=$(testDir);        export MODULEPATH_ROOT
     LMOD_PACKAGE_PATH=$(testDir);      export LMOD_PACKAGE_PATH

     HOME_ORIG=`(cd $HOME; /bin/pwd)`
     HOME=`pwd`;                        export HOME
     COUNT=0;
     numStep=0;

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     LMOD_PACKAGE_PATH=$(testDir);      export LMOD_PACKAGE_PATH
     runLmod --version               # 1
     runLmod load TACC               # 2
     runLmod load pgi/7.2-5          # 3
     runLmod list                    # 4
     runLmod save default            # 5
     runLmod restore                 # 6
     runLmod list                    # 7
     runLmod use $(testDir)/TACC2    # 8
     runLmod load a                  # 9
     runLmod list                    #10
     runLmod save                    #11

     runLmod purge                   #12
     unsetMT
     MODULEPATH=$(testDir)/TACC

     runLmod restore                 #13
     runLmod list                    #14
     runLmod spider                  #15



     HOME=$HOME_ORIG
     export HOME
     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)

     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
