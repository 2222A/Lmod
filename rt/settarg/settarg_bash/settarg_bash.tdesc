-- -*- lua -*-
local testName = "settarg_bash"
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName,"settarg" },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     clearTARG
     TARGET_PREFIX="obj/";                 export TARGET_PREFIX
     initStdEnvVars
     MODULEPATH=$(testDir)/../mf/Core;     export MODULEPATH
     MODULEPATH_ROOT=$(testDir)/../mf;     export MODULEPATH_ROOT

     numStep=0
     COUNT=0
     HOME_ORIG=`(cd $HOME; /bin/pwd)`
     HOME=`pwd`;                           export HOME
     cp $(projectDir)/settarg/.settarg.lua  .

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runMe lua $(projectDir)/src/lmod.in.lua bash --version                  # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash load settarg               # 2    
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua --no_cpu_model dbg   # 3
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua --no_cpu_model empty # 4
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua --no_cpu_model opt   # 5
     runMe lua $(projectDir)/src/lmod.in.lua bash load gcc mpich             # 6 
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua --no_cpu_model       # 7
     runMe lua $(projectDir)/src/lmod.in.lua bash unload settarg             # 8    


     HOME_ORIG=$HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
