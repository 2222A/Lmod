-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"PREREQ","prereq" },

   active   = 1,
   testName = "prereq",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     ORIGPATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     PATH=$ORIGPATH
     export PATH
     unset LIBPATH
     unset SHLIB_PATH
     unset LMOD_EXPERT
     unset  LMOD_COMPILER
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH=$(testDir)/mf;          export MODULEPATH
     LMOD_DEFAULT_MODULEPATH=$MODULEPATH
     export LMOD_DEFAULT_MODULEPATH
     COUNT=0;
     numStep=0;
     HOME=`(cd $HOME; /bin/pwd)`

     rm -f _stderr.* _stdout.* err.* out.*

     runMe lua $(projectDir)/src/lmod.in bash load petsc         #  1

     runMe lua $(projectDir)/src/lmod.in bash load slepc/3.0.0   #  2

     runMe lua $(projectDir)/src/lmod.in bash unload slepc       #  3

     runMe lua $(projectDir)/src/lmod.in bash unload petsc       #  4

     runMe lua $(projectDir)/src/lmod.in bash load slepc         #  5

     runMe lua $(projectDir)/src/lmod.in bash load petsc/2.9.0   #  6

     runMe lua $(projectDir)/src/lmod.in bash load slepc         #  7

     runMe lua $(projectDir)/src/lmod.in bash load slepc/2.9.0   #  8

     runMe lua $(projectDir)/src/lmod.in bash load petsc/3.1.0   #  9

     runMe lua $(projectDir)/src/lmod.in bash load slepc         # 10

     runMe lua $(projectDir)/src/lmod.in bash unload slepc petsc # 11

     runMe lua $(projectDir)/src/lmod.in bash load petsc/3.1.0   # 12

     runMe lua $(projectDir)/src/lmod.in bash load slepc/2.9.0   # 13

     

     PATH=$ORIGPATH
     export PATH

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
