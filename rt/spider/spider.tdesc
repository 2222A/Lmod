-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"load" },

   active = 1,
   testName = "spider",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH
     unset  LMOD_COMPILER
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH="";                     export MODULEPATH
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     LMOD_DEFAULT_MODULEPATH=$MODULEPATH
     export LMOD_DEFAULT_MODULEPATH
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`

     rm -f  _stderr.* _stdout.* err.* out.*
     rm -fr .lmod.d .lmodrc.lua
     cp $(projectDir)/setup/.lmodrc.lua .

     runMe lua $(projectDir)/src/lmod.in.lua bash --version
     runMe lua $(projectDir)/src/lmod.in.lua bash use -a $projectDir/mf/Core $projectDir/mf/Beta
     runMe lua $(projectDir)/src/lmod.in.lua bash spider
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2/1.0.7

     runMe lua $(projectDir)/src/lmod.in.lua bash spider parmetis/3.1

     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2me
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2/1.0.5
     
     mkdir -p $HOME/.lmod.d/.cache 
     lua $(projectDir)/src/spider.in.lua -o moduleT $LMOD_DEFAULT_MODULEPATH > $HOME/.lmod.d/.cache/moduleT.lua
     runMe lua $(projectDir)/src/lmod.in.lua bash spider

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
