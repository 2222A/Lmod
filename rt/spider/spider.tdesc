-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"load" },

   active = 1,
   testName = "spider",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`

     rm -f  _stderr.* _stdout.* err.* out.*
     rm -fr .lmod.d .lmodrc.lua
     cp $(projectDir)/init/.lmodrc.lua .

     runMe lua $(projectDir)/src/lmod.in.lua bash --version                                                        # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash use -a $projectDir/mf/Core $projectDir/mf/Beta                   # 2
     runMe lua $(projectDir)/src/lmod.in.lua bash spider                                                           # 3
     runMe lua $(projectDir)/src/lmod.in.lua bash -t spider                                                        # 4
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2                                                    # 5
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2/1.0.7                                              # 6

     runMe lua $(projectDir)/src/lmod.in.lua bash spider parmetis/3.1                                              # 7

     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2me                                                  # 8
     runMe lua $(projectDir)/src/lmod.in.lua bash spider mpich2/1.0.5                                              # 9

     mkdir -p $HOME/.lmod.d/.cache
     lua $(projectDir)/src/spider.in.lua -o moduleT $LMOD_DEFAULT_MODULEPATH > $HOME/.lmod.d/.cache/moduleT.lua
     runMe lua $(projectDir)/src/lmod.in.lua bash spider                                                           #10

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
