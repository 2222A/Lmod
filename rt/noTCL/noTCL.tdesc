-- -*- lua -*-

testName = "noTCL"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core:$MODULEPATH_ROOT/TACC
     export MODULEPATH
     LMOD_DEFAULT_MODULEPATH=$MODULEPATH
     export LMOD_DEFAULT_MODULEPATH
     export LMOD_ALLOW_TCL_MFILES=no;
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d
     cp $(projectDir)/init/.lmodrc.lua .

     runLmod --version                                      # 1
     runLmod avail                                          # 2
     runLmod spider                                         # 3
     runLmod load   PrgEnv                                  # 4
     runLmod unload PrgEnv                                  # 5
     buildModuleT $LMOD_DEFAULT_MODULEPATH > $HOME/.lmod.d/.cache/moduleT.lua
     runLmod load   PrgEnv                                  # 6


     

     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) $(cmdResultFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
