-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"keyword" },

   active = 1,
   testName = "keyword",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH
     unset  LMOD_COMPILER
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     MODULEPATH=$(projectDir)/mf/Core:$(projectDir)/mf/Compiler/intel/10.1:$(projectDir)/mf/MPI/intel/10.1/openmpi/1.2.6;
     export MODULEPATH
     LMOD_DEFAULT_MODULEPATH=$MODULEPATH
     export LMOD_DEFAULT_MODULEPATH
     OLDHOME=`(cd $HOME; pwd)`
     HOME=`pwd`

     rm -f _stderr.* _stdout.* err.* out.*

     lua $(projectDir)/src/lmod.in bash keyword graph > _stdout.orig 2> err.txt

     HOME=$OLDHOME

     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
