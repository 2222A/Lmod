-- -*- lua -*-
inactiveTbl = { Darwin = 1, }
local function isActive()
   require("posix")
   local homeDir = os.getenv("HOME")
   local osName  = posix.uname("%s")
   return ((not inactiveTbl[osName]) and (homeDir == "/home/mclay"))
end

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"csh_swap" },

   active = 1,
   testName = "csh_swap",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh
     

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH

     cp $(projectDir)/setup/.lmodrc.lua .

     #unset LUA_PATH

     _histchars="@%"


cat > $(testName).csh << EOF
#!/bin/tcsh
     setenv PATH $PATH
     unsetenv _ModuleTable001_
     unsetenv INFOPATH
     unsetenv MANPATH
     unsetenv LMOD_EXPERT
     unsetenv LMOD_COMPILER
     unsetenv LD_LIBRARY_PATH
     setenv MODULEPATH $(projectDir)/mf/Core:$(testDir)/mf/Core
     setenv MODULEPATH_ROOT $(projectDir)/mf
     setenv LMOD_DEFAULT_MODULEPATH $MODULEPATH


     echo "==========================="
     echo "step 0"
     echo "==========================="

     echo "===========================" >  _stdout.01
     echo "step 0"                      >> _stdout.01
     echo "===========================" >> _stdout.01

     lua $(projectDir)/src/lmod.in csh --version > _stdout.02
     eval \`cat _stdout.02\`

     echo "==========================="
     echo "step 1"
     echo "==========================="

     echo "===========================" >  _stdout.01
     echo "step 1"                      >> _stdout.01
     echo "===========================" >> _stdout.01

     lua $(projectDir)/src/lmod.in csh load admin PrgEnv openmpi parmetis > _stdout.02
     eval \`cat _stdout.02\`

     echo "===========================" >  _stdout.03
     echo "step 2"                      >> _stdout.03
     echo "===========================" >> _stdout.03

     echo "==========================="
     echo "step 2"
     echo "==========================="

     lua $(projectDir)/src/lmod.in csh unload intel > _stdout.04
     eval \`cat _stdout.04\`

     echo "===========================" >  _stdout.05
     echo "step 3"                      >> _stdout.05
     echo "===========================" >> _stdout.05

     echo "==========================="
     echo "step 3"
     echo "==========================="

     lua $(projectDir)/src/lmod.in csh load gcc  > _stdout.06
     eval \`cat _stdout.06\`

     echo "===========================" >  _stdout.07
     echo "step 4"                      >> _stdout.07
     echo "===========================" >> _stdout.07

     echo "==========================="
     echo "step 4"
     echo "==========================="


     lua $(projectDir)/src/lmod.in csh load ml  > _stdout.08
     eval \`cat _stdout.08\`

     echo "===========================" >  _stdout.09
     echo "step 5"                      >> _stdout.09
     echo "===========================" >> _stdout.09

     echo "==========================="
     echo "step 5"
     echo "==========================="

     unset histchars
     lua $(projectDir)/src/lmod.in csh --localvar histchars="$_histchars" swap gcc  intel > _stdout.10
     eval \`cat _stdout.10\`

     cat _stdout.[01][1-9] > _stdout.orig
EOF

     ORIG_HOME=`(cd $HOME; /bin/pwd)`

     rm -f _stderr.* _stdout.* err.* out.*
     unset SHELL_STARTUP_DEBUG
     chmod +x $(testName).csh
     
     HOME=`pwd`
     ./$(testName).csh > err.txt 2>&1

     HOME=$ORIG_HOME

     joinBase64Results -csh  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
