-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"vasp" },

   active = 1,
   testName = "vasp",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin
     export PATH
     unset  LMOD_COMPILER
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     MODULEPATH=$(projectDir)/mf/Core:$(projectDir)/mf/Compiler/intel/10.1:$(projectDir)/mf/MPI/intel/10.1/openmpi/1.2.6;
     MODULEPATH=$(testDir)/mf:$MODULEPATH
     export MODULEPATH
     LMOD_DEFAULT_MODULEPATH=$(projectDir)/mf/Core:$(testDir)/mf
     export LMOD_DEFAULT_MODULEPATH
     COUNT=0
     numStep=0
     HOME=`(cd $HOME; /bin/pwd)`
     OLDHOME=$HOME
     HOME=`/bin/pwd`

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runMe lua $(projectDir)/src/lmod.in.lua bash --version                        # 1
     runMe lua $(projectDir)/src/lmod.in.lua bash keyword graph                    # 2
     runMe lua $(projectDir)/src/lmod.in.lua bash whatis vasp                      # 3
     runMe lua $(projectDir)/src/lmod.in.lua bash help vasp                        # 4
     runMe lua $(projectDir)/src/lmod.in.lua bash load vasp                        # 5
     runBase lua $(projectDir)/src/spider.in.lua -o list $LMOD_DEFAULT_MODULEPATH  # 6

     HOME=$OLDHOME

     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     joinBase64Results  -bash  _stderr.orig _stderr.new
     cleanUp _stderr.new err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
