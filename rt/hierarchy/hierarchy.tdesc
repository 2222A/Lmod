-- -*- lua -*-
local testName = "hierarchy"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test always_load, always_unload
   ]],
   keywords = {testName },

   active   = true,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(testDir)/mf;    export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core; export MODULEPATH
     numStep=0
     COUNT=0
     ORIG_HOME=`(cd $HOME; /bin/pwd)`
     HOME=`/bin/pwd`


     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runLmod --version                     # 1
     runLmod load parmetis                 # 2
     runLmod load parmetis/4.0.3           # 3
     runLmod load parmetis/11.0            # 4
     runLmod load clang openmpi  parmetis  # 5
     runLmod avail                         # 6
     runLmod load -clang -openmpi          # 7
     runLmod list                          # 8
     runLmod load gcc mpich                # 9
     runLmod list                          #10
     runLmod load ben                      #13
     runLmod load ben/0.1                  #14
     runLmod load fbr                      #15
     runLmod list                          #16
     runLmod unload fbr                    #17
     runLmod load clang                    #18
     runLmod --expert load clang           #19
     runLmod list                          #20
     runLmod purge                         #21
     runLmod load gcc mpich                #22
     runLmod unload mpich gcc              #23
     runLmod load gcc mpich                #24
     runLmod unload mpich gcc              #25


     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $(cmdResultFn)
     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) $(cmdResultFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
