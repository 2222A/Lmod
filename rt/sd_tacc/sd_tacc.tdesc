-- -*- lua -*-
inactiveTbl = { Darwin = 1, }
local function isActive()
   require("posix")
   local osName = posix.uname("%s")
   return (not inactiveTbl[osName])
end

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"default","setdefault", "getdefault","setgetdefault","getsetdefault" },

   active = 1,
   testName = "sd_tacc",
   job_submit_method = "INTERACTIVE", 

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh
     unsetMT
     PATH_to_LUA=`findcmd --pathOnly lua`
     PATH_to_TM=`findcmd --pathOnly tm`

     PATH=$(projectDir)/src:$PATH_to_LUA:$PATH_to_TM:/usr/bin:/bin:/opt/local/libexec/gnubin
     export PATH
     unset  LIBPATH
     unset  SHLIB_PATH
     unset  LMOD_COMPILER
     INFOPATH='';                       export INFOPATH
     MANPATH='';                        export MANPATH
     LD_LIBRARY_PATH='';                export LD_LIBRARY_PATH
     MODULEPATH=$(projectDir)/mf/TACC;  export MODULEPATH
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT
     LMOD_PREPEND_BLOCK=yes;            export LMOD_PREPEND_BLOCK
     LMOD_DEFAULT_MODULEPATH=$MODULEPATH
     export LMOD_DEFAULT_MODULEPATH

     HOME=`(cd $HOME; /bin/pwd)`
     HOME_ORIG=$HOME  
     HOME=`pwd`;                        export HOME
     COUNT=0;
     numStep=0;
     
     rm -f _stderr.* _stdout.* err.* out.*

     (cd $projectDir; ./configure; make src/computeHashSum)
     rm -rf $HOME/.lmod.d

     runMe lua $(projectDir)/src/lmod.in.lua bash --version
     runMe lua $(projectDir)/src/lmod.in.lua bash load TACC.orig
     runMe lua $(projectDir)/src/lmod.in.lua bash save

     runMe lua $(projectDir)/src/lmod.in.lua bash purge
     PATH=$PATH_to_LUA:$PATH
     runMe lua $(projectDir)/src/lmod.in.lua bash load TACC
     runMe lua $(projectDir)/src/lmod.in.lua bash save

     HOME=$HOME_ORIG
     export HOME
     cat _stdout.[0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f $projectDir/src/computeHashSum
     
     rm -f $(cmdResultFn)

     wrapperDiff -r $(cmdResultFn) $(testDir)/out.txt out.txt
     wrapperDiff -r $(cmdResultFn) $(testDir)/err.txt err.txt
     testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
