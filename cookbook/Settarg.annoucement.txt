Lmod Version 5.1.0:

Version 5.1.0 now supports the following new features:

a) module --ignore_cache which tell Lmod to ignore the cache if it
   exists.

b) module --config report how lmod was configured.

c) Now Lmod does not walk the directory tree on command like list and
   unload.

d) The pager is now only used when TERM is defined and stderr is
   connected to a tty (this includes a pty: pseudo tty).

e) Support for settarg has been added.

------------------------------------------------------------------------
What is Settarg?
------------------------------------------------------------------------
* New module settarg

* A new functionality that allows Lmod to keep current and consistent
  a set of env. variable that encapsolate the state of the currently
  loaded modules.
* For example TARG_COMPILER would be gcc-4.7.3
* First example of a new capiabitlty
** For example I use it this way
** In fact it is designed to support this work flow.
** Even if this workflow is not yours you may find parts of this usefull.





Settarg is an optional feature of Lmod.  It is there to answer the
question is there an easy way for your build system to which compiler you
are using, which mpi stack, what other modules are you using.  And the
fundamental feature of settarg is: Can you have an single environment
variable that enscapsilate the state of your modules (that you care
about).  The answer to those questions is yes, it is settarg.  Settarg
knows how to read the module table and therefore know what modules you
have loaded.  

Many developers like to build their programs in multiple ways say in
debug or optimized modes.  Settarg provides environment variables that
be used to control the build process.


How do you use settarg?
-----------------------

a) Configure and install Lmod with settarg support to be "yes".
b) Copy the config/settarg/1.0.lua module into your module tree.
c) Load the settarg module.
d) Verify that the TARG variable have been set: $ env | grep TARG
e) Verify that the "precmd" shell function or alias is defined and
   PROMPT_COMMAND="precmd" for bash.  Strings that contain the
   compiler name should appear in the xterm title bar.


What variables are set by Settarg?
----------------------------------

Typically you will something this when gcc/4.7.2 is loaded:


   TARG=_x86_64_06_1a_gcc-4.7.3
   TARG_COMPILER=gcc-4.7.3
   TARG_COMPILER_FAMILY=gcc
   TARG_MACH=x86_64_06_1a
   TARG_TARGET=x86_64_06_1a_gcc-4.7.3

When mpich/3.0.4 is also loaded you get:

   TARG=_x86_64_06_1a_gcc-4.7.3_mpich-3.0.4
   TARG_COMPILER=gcc-4.7.3
   TARG_COMPILER_FAMILY=gcc
   TARG_MACH=x86_64_06_1a
   TARG_TARGET=x86_64_06_1a_gcc-4.7.3_mpich-3.0.4
   TARG_MPI=mpich-3.0.4
   TARG_MPI_FAMILY=mpich

The TARG variable reports the state of the modules.  By default the
TARG variable is:

 TARG =   _ + ${TARG_MACH}     + _ + ${TARG_BUILD_SCENARIO} + 
          _ + ${TARG_COMPILER} + _ + ${TARG_MPI}

where "+" means string concatation.  If one of the above variables
is undefined then the extra underscores are removed.

The ${TARG_BUILD_SCENARIO} is by default set to be empty.  The
commands "dbg" and "opt" set TARG_BUILD_SCENARIO to be "dbg" and "opt"
respectively.   This variable could be used by a build system to
control whether the optimized or debug version of a program is built.










